{"version":3,"file":"BluetoothEventHandler.js","sourceRoot":"","sources":["../src/BluetoothEventHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription } from 'expo-core';\n\nimport { Central, NativePeripheral } from './Bluetooth.types';\nimport { BLUETOOTH_EVENT, EVENTS } from './BluetoothConstants';\nimport { getPeripherals } from './BluetoothLocalState';\nimport ExpoBluetooth from './ExpoBluetooth';\n\nconst eventEmitter = new EventEmitter(ExpoBluetooth);\n\nconst multiEventHandlers: any = {\n  [EVENTS.CENTRAL_DID_DISCOVER_PERIPHERAL]: [],\n  [EVENTS.CENTRAL_DID_UPDATE_STATE]: [],\n  everything: [],\n  centralState: [],\n};\n\nexport function firePeripheralObservers() {\n  for (const subscription of multiEventHandlers.everything) {\n    subscription({ peripherals: getPeripherals() });\n  }\n}\n\nexport function fireMultiEventHandlers(\n  event: string,\n  { central, peripheral }: { central?: Central | null; peripheral?: NativePeripheral | null }\n) {\n  ensureKey(event);\n  for (const callback of multiEventHandlers[event]) {\n    callback({ central, peripheral });\n  }\n}\n\nfunction ensureKey(key) {\n  if (!(key in multiEventHandlers)) {\n    multiEventHandlers[key] = [];\n  }\n}\n\nexport async function resetHandlersForKey(key) {\n  ensureKey(key);\n\n  let promises: any[] = [];\n  for (const listener of multiEventHandlers[key]) {\n    if (listener.remove instanceof Function) {\n      promises.push(listener.remove());\n    }\n  }\n  multiEventHandlers[key] = [];\n  return await Promise.all(promises);\n}\n\nexport async function _resetAllHandlers() {\n  for (const key of Object.keys(multiEventHandlers)) {\n    await resetHandlersForKey(key);\n  }\n}\n\nexport function addHandlerForKey(key: string, callback: (updates: any) => void): Subscription {\n  ensureKey(key);\n  multiEventHandlers[key].push(callback);\n\n  return {\n    remove() {\n      const index = multiEventHandlers[key].indexOf(callback);\n      if (index != -1) {\n        multiEventHandlers[key].splice(index, 1);\n      }\n    },\n  };\n}\n\nexport function getHandlersForKey(key) {\n  ensureKey(key);\n  return multiEventHandlers[key];\n}\n\nexport function addListener(listener: (event: any) => void): Subscription {\n  // eventEmitter.removeAllListeners(BLUETOOTH_EVENT);\n  console.log('EXBLUE_INTERNAL: listener count: ', eventEmitter._listenerCount);\n  return eventEmitter.addListener(BLUETOOTH_EVENT, listener);\n}\n\n// TODO: Bacon: How do we plan on calling this...\nexport function removeAllListeners(): void {\n  eventEmitter.removeAllListeners(BLUETOOTH_EVENT);\n}\n"]}