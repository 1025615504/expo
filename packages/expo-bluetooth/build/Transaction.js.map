{"version":3,"file":"Transaction.js","sourceRoot":"","sources":["../src/Transaction.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAE,sBAAsB,EAAQ,eAAe,EAAiB,MAAM,mBAAmB,CAAC;AACjG,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAWnD,MAAM,CAAC,OAAO,OAAO,WAAW;IAC9B,wFAAwF;IACxF,MAAM,CAAC,iBAAiB,CAAC,aAA4B;QACnD,IAAI,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAClD,IAAI,IAAqC,CAAC;QAC1C,IACE,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EACtD;YACA,IAAI,GAAG,UAAU,CAAC,KAAK,EAAyB,CAAC;SAClD;QACD,MAAM,CAAC,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,CAAC,GAAG,UAAU,CAAC;QAErF,OAAO,IAAI,WAAW,CACpB,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAE,EACnE,IAAI,CACL,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,qBAAqB,CAC1B,gBAAkC,EAClC,IAAyB;QAEzB,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QAE5D,OAAO,WAAW,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC;IAWD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACD,YACE,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAoB,EACrF,IAA0B;QAE1B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,QAAQ;QACN,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;QAEjF,OAAO;YACL,cAAc;YACd,WAAW;YACX,kBAAkB;YAClB,cAAc;SACf,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,IAA0B;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,UAAU;QACR,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC;QAEjF,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;SACvF;QACD,OAAO,mBAAmB,CACxB,EAAE,cAAc,EAAE,WAAW,EAAE,kBAAkB,EAAE,cAAc,EAAE,EACnE,IAAI,CAAC,IAAI,CACV,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { createTransactionId } from './BluetoothTransactions';\nimport { CharacteristicProperty, UUID, TransactionType, TransactionId } from './Bluetooth.types';\nimport { DELIMINATOR } from './BluetoothConstants';\n\ntype PossibleTransaction = TransactionType | CharacteristicProperty;\n\nexport type TransactionUUIDs = {\n  peripheralUUID?: UUID;\n  serviceUUID?: UUID;\n  characteristicUUID?: UUID;\n  descriptorUUID?: UUID;\n};\n\nexport default class Transaction {\n  // Return a Transaction from a transactionId ex: read|some_peripheral_id|some_service_id\n  static fromTransactionId(transactionId: TransactionId): Transaction {\n    let components = transactionId.split(DELIMINATOR);\n    let type: PossibleTransaction | undefined;\n    if (\n      Object.values(CharacteristicProperty).includes(components[0]) ||\n      Object.values(TransactionType).includes(components[0])\n    ) {\n      type = components.shift() as PossibleTransaction;\n    }\n    const [peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID] = components;\n\n    return new Transaction(\n      { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID },\n      type\n    );\n  }\n\n  static generateTransactionId(\n    transactionUUIDs: TransactionUUIDs,\n    type: PossibleTransaction\n  ): TransactionId {\n    const transaction = new Transaction(transactionUUIDs, type);\n\n    return transaction.generateId();\n  }\n  peripheralUUID?: string;\n\n  serviceUUID?: string;\n\n  characteristicUUID?: string;\n\n  descriptorUUID?: string;\n\n  _type?: PossibleTransaction;\n\n  get type(): PossibleTransaction | undefined {\n    return this._type;\n  }\n  constructor(\n    { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID }: TransactionUUIDs,\n    type?: PossibleTransaction\n  ) {\n    this.peripheralUUID = peripheralUUID;\n    this.serviceUUID = serviceUUID;\n    this.characteristicUUID = characteristicUUID;\n    this.descriptorUUID = descriptorUUID;\n    this._type = type;\n  }\n\n  getUUIDs(): TransactionUUIDs {\n    const { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID } = this;\n\n    return {\n      peripheralUUID,\n      serviceUUID,\n      characteristicUUID,\n      descriptorUUID,\n    };\n  }\n\n  setType(type?: PossibleTransaction) {\n    this._type = type;\n  }\n\n  generateId(): TransactionId {\n    const { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID } = this;\n\n    if (this.type === undefined) {\n      throw new Error('expo-bluetooth: Transaction.generateId(): type cannot be undefined');\n    }\n    return createTransactionId(\n      { peripheralUUID, serviceUUID, characteristicUUID, descriptorUUID },\n      this.type\n    );\n  }\n}\n"]}