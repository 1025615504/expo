{"version":3,"file":"Bluetooth.types.js","sourceRoot":"","sources":["../src/Bluetooth.types.ts"],"names":[],"mappings":"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","sourcesContent":["export enum Priority {\n  High = 'high',\n  LowPower = 'lowPower',\n  Balanced = 'balanced',\n}\n\nexport enum CentralState {\n  Unknown = 'unknown',\n  Resetting = 'resetting',\n  Unsupported = 'unsupported',\n  Unauthorized = 'unauthorized',\n  PoweredOff = 'poweredOff',\n  PoweredOn = 'poweredOn',\n}\n\nexport enum AndroidCentralState {\n  poweringOff = 'poweringOff',\n  poweredOff = 'poweredOff',\n  poweringOn = 'poweringOn',\n  poweredOn = 'poweredOn',\n  unknown = 'unknown',\n}\n\nexport enum PeripheralState {\n  Disconnected = 'disconnected',\n  Connecting = 'connecting',\n  Connected = 'connected',\n  Disconnecting = 'disconnecting',\n  Unknown = 'unknown',\n}\n\nexport enum AndroidAdapterScanMode {\n  none = 'none',\n  connectable = 'connectable',\n  discoverable = 'discoverable',\n}\n\nexport enum AndroidScanCallbackType {\n  /**\n   * Trigger a callback for every Bluetooth advertisement found that matches the filter criteria.\n   * If no filter is active, all advertisement packets are reported.\n   */\n  allMatches = 'allMatches',\n\n  /**\n   * A result callback is only triggered for the first advertisement packet received that matches\n   * the filter criteria.\n   */\n  firstMatch = 'firstMatch',\n\n  /**\n   * Receive a callback when advertisements are no longer received from a device that has been\n   * previously reported by a first match callback.\n   */\n  matchLost = 'MATCH_LOST',\n}\n\nexport enum AndroidScanMode {\n  lowLatency = 'lowLatency',\n  lowPower = 'lowPower',\n  balanced = 'balanced',\n  opportunistic = 'opportunistic',\n}\n\n/** Android M 23+ */\nexport enum AndroidMatchMode {\n  aggresive = 'aggresive', // default\n  sticky = 'sticky',\n}\n\n/** Android O 26+ */\nexport enum AndroidPhyMode {\n  LE1M = 'LE1M',\n  LE2M = 'LE2M',\n  coded = 'coded',\n  allSupported = 'allSupported', // default\n}\n\n/** Android M 23+ */\nexport enum AndroidNumberOfMatches {\n  max = 'max', // default\n  one = 'one',\n  few = 'few',\n}\n\nexport enum TransactionType {\n  get = 'get',\n  rssi = 'rssi',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  scan = 'scan',\n}\n\nexport enum CharacteristicProperty {\n  /* Permits broadcasts of the characteristic value using a characteristic configuration descriptor.\n   * Not allowed for local characteristics.\n   */\n  Broadcast = 'broadcast',\n  /* Permits reads of the characteristic value. */\n  Read = 'read',\n  /* Permits writes of the characteristic value, without a response. */\n  WriteWithoutResponse = 'writeWithoutResponse',\n  /* Permits writes of the characteristic value. */\n  Write = 'write',\n  /* Permits notifications of the characteristic value, without a response. */\n  Notify = 'notify',\n  /* Permits indications of the characteristic value. */\n  Indicate = 'indicate',\n  /* Permits signed writes of the characteristic value */\n  AutheticateSignedWrites = 'autheticateSignedWrites',\n  /* If set, additional characteristic properties are defined in the characteristic extended properties descriptor.\n   * Not allowed for local characteristics.\n   */\n  ExtendedProperties = 'extendedProperties',\n  /* If set, only trusted devices can enable notifications of the characteristic value. */\n  NotifyEncryptionRequired = 'notifyEncryptionRequired',\n  /* If set, only trusted devices can enable indications of the characteristic value. */\n  IndicateEncryptionRequired = 'indicateEncryptionRequired',\n}\n\n/* Read, write, and encryption permissions for an ATT attribute. Can be combined. */\nexport enum Permissions {\n  /* Read-only. */\n  Readable = 'Readable',\n  /* Write-only. */\n  Writeable = 'Writeable',\n  /* Readable by trusted devices. */\n  ReadEncryptionRequired = 'ReadEncryptionRequired',\n  /* Writeable by trusted devices. */\n  WriteEncryptionRequired = 'WriteEncryptionRequired',\n}\n\n/* Types */\nexport type Base64 = string;\nexport type UUID = string;\nexport type Identifier = string;\nexport type TransactionId = string;\n\nexport interface NativeBluetoothElement {\n  id: Identifier;\n  uuid: UUID;\n  // TODO: Bacon: Maybe add a type like peripheral, service, characteristc, descriptor\n}\n\nexport interface NativeDescriptor extends NativeBluetoothElement {\n  characteristicUUID: UUID;\n  value?: Base64;\n}\n\nexport type NativeEventData = {\n  transactionId?: TransactionId;\n  peripheral?: NativePeripheral | null;\n  peripherals?: NativePeripheral[];\n  characteristic?: NativeCharacteristic | null;\n  central?: Central | null;\n  descriptor?: NativeDescriptor | null;\n  service?: NativeService | null;\n  advertisementData?: NativeAdvertismentData | null;\n  RSSI?: number;\n  error?: NativeError | null;\n};\n\nexport interface NativeError {\n  message: string;\n  code: string;\n  stack?: string;\n}\n\nexport interface NativeCharacteristic extends NativeBluetoothElement {\n  serviceUUID: UUID;\n  peripheralUUID: UUID;\n  properties: string[]; // TODO: Bacon: more specific\n  descriptors: NativeDescriptor[];\n  value: Base64 | null;\n  isNotifying: boolean;\n\n  //TODO: Bacon: Add\n  isReadable: boolean;\n  isWritableWithResponse: boolean;\n  isWritableWithoutResponse: boolean;\n  isNotifiable: boolean;\n  isIndicatable: boolean;\n}\n\nexport interface NativeService extends NativeBluetoothElement {\n  peripheralUUID: UUID;\n  isPrimary: boolean;\n  includedServices: NativeService[];\n  characteristics: NativeCharacteristic[];\n}\n\nexport interface NativeAdvertismentData {\n  manufacturerData: Base64 | null;\n  serviceData: { [uuid: string]: Base64 } | null;\n  serviceUUIDs: UUID[] | null;\n  localName: string | null;\n  txPowerLevel: number | null;\n  solicitedServiceUUIDs: UUID[] | null;\n  isConnectable: boolean | null;\n  overflowServiceUUIDs: UUID[] | null;\n}\n\nexport interface NativePeripheral extends NativeBluetoothElement {\n  advertisementData?: NativeAdvertismentData;\n  name: string | null;\n  RSSI: number | null;\n  state: PeripheralState;\n  services: NativeService[];\n  includedServices: NativeService[];\n  /**\n   * **ios**\n   */\n  canSendWriteWithoutResponse?: boolean;\n  /**\n   * **Android**\n   */\n  bondState?: BondState;\n  // mtu: number;\n  // JS\n  discoveryTimestamp?: number;\n}\n\nexport type PeripheralFoundCallback = (peripheral: NativePeripheral) => void;\n\nexport type StateUpdatedCallback = (state: CentralState) => void;\n\nexport type ScanSettings = {\n  serviceUUIDsToQuery?: UUID[];\n  scanningOptions?: any; //TODO: Bacon: This is where the iOS multi-scan value would be defined.\n  callback?: PeripheralFoundCallback;\n};\n\nexport enum BondState {\n  Bonded = 'bonded',\n  Bonding = 'bonding',\n  Unknown = 'unknown',\n  None = 'none',\n}\nexport interface Central {\n  state: CentralState;\n  isScanning: boolean;\n}\n\nexport type UpdateDescriptorOptions = {\n  descriptorUUID?: UUID;\n};\n\nexport type UpdateOptions = {\n  peripheralUUID: UUID;\n  serviceUUID: UUID;\n  characteristicUUID: UUID;\n};\n\nexport type UpdateCharacteristicOptions = UpdateOptions & {\n  isEnabled?: boolean;\n};\n\nexport type ReadCharacteristicOptions = UpdateCharacteristicOptions;\n\nexport type WriteCharacteristicOptions = UpdateCharacteristicOptions & {\n  data: Base64;\n};\n\n// export type TransactionHandler = { callbacks: Array<Function | Promise<any>> } | Promise<any>;\ntype Prom = {\n  resolve: Function;\n  reject: Function;\n};\n\nexport type TransactionHandler = any; // { callbacks: Array<Function | Prom> } | Prom;\n\nexport type ScanOptions = {\n  serviceUUIDsToQuery?: UUID[];\n\n  androidCallbackType?: AndroidScanCallbackType;\n\n  androidScanMode?: AndroidScanMode;\n  /** M (23+) */\n  androidMatchMode?: AndroidMatchMode;\n  /**\n   * M (23+)\n   * Match as many advertisement per filter as hw could allow\n   * dependes on current capability and availability of the resources in hw.\n   */\n  androidNumberOfMatches?: AndroidNumberOfMatches;\n  /** Oreo (26+) */\n  androidOnlyConnectable?: boolean;\n  /**\n   * Oreo (26+)\n   * This value will only be used if `androidPhy` is undefined.\n   */\n  androidUseLegacy?: boolean;\n  /**\n   * Oreo (26+)\n   * When defined, `androidUseLegacy` is automatically set to `false`.\n   */\n  androidPhy?: AndroidPhyMode;\n\n  // iOS SCAN_OPTIONS\n  [key: string]: any;\n};\n\nexport type CancelScanningCallback = () => void;\n"]}