{"version":3,"file":"Bluetooth.types.js","sourceRoot":"","sources":["../src/Bluetooth.types.ts"],"names":[],"mappings":"AAAA,MAAM,CAAN,IAAY,YAOX;AAPD,WAAY,YAAY;IACtB,mCAAmB,CAAA;IACnB,uCAAuB,CAAA;IACvB,2CAA2B,CAAA;IAC3B,6CAA6B,CAAA;IAC7B,yCAAyB,CAAA;IACzB,uCAAuB,CAAA;AACzB,CAAC,EAPW,YAAY,KAAZ,YAAY,QAOvB;AACD,MAAM,CAAN,IAAY,eAMX;AAND,WAAY,eAAe;IACzB,gDAA6B,CAAA;IAC7B,4CAAyB,CAAA;IACzB,0CAAuB,CAAA;IACvB,kDAA+B,CAAA;IAC/B,sCAAmB,CAAA;AACrB,CAAC,EANW,eAAe,KAAf,eAAe,QAM1B;AAmFD,MAAM,CAAN,IAAY,eAOX;AAPD,WAAY,eAAe;IACzB,8BAAW,CAAA;IACX,gCAAa,CAAA;IACb,kCAAe,CAAA;IACf,sCAAmB,CAAA;IACnB,4CAAyB,CAAA;IACzB,gCAAa,CAAA;AACf,CAAC,EAPW,eAAe,KAAf,eAAe,QAO1B","sourcesContent":["export enum CentralState {\n  Unknown = 'unknown',\n  Resetting = 'resetting',\n  Unsupported = 'unsupported',\n  Unauthorized = 'unauthorized',\n  PoweredOff = 'poweredOff',\n  PoweredOn = 'poweredOn',\n}\nexport enum PeripheralState {\n  Disconnected = 'disconnected',\n  Connecting = 'connecting',\n  Connected = 'connected',\n  Disconnecting = 'disconnecting',\n  Unknown = 'unknown',\n}\n\n/* Types */\nexport type Base64 = string;\nexport type UUID = string;\nexport type Identifier = string;\nexport type TransactionId = string;\n\nexport interface NodeInterface {\n  id: Identifier;\n  uuid: UUID;\n}\n\nexport interface DescriptorInterface extends NodeInterface {\n  characteristicUUID: UUID;\n  value?: Base64;\n}\n\nexport type NativeEventData = {\n  transactionId?: TransactionId;\n  peripheral?: PeripheralInterface | null;\n  peripherals?: PeripheralInterface[];\n  characteristic?: CharacteristicInterface | null;\n  central?: Central | null;\n  descriptor?: DescriptorInterface | null;\n  service?: ServiceInterface | null;\n  advertisementData?: AdvertismentDataInterface | null;\n  rssi?: number;\n  error?: ErrorInterface | null;\n};\n\nexport interface ErrorInterface {\n  message: string;\n  code: string;\n}\n\nexport interface CharacteristicInterface extends NodeInterface {\n  serviceUUID: UUID;\n  peripheralUUID: UUID;\n  properties: string[]; // TODO: Bacon: more specific\n  descriptors: DescriptorInterface[];\n  value: Base64 | null;\n  isNotifying: boolean;\n\n  //TODO: Bacon: Add\n  isReadable: boolean;\n  isWritableWithResponse: boolean;\n  isWritableWithoutResponse: boolean;\n  isNotifiable: boolean;\n  isIndicatable: boolean;\n}\n\nexport interface ServiceInterface extends NodeInterface {\n  peripheralUUID: UUID;\n  isPrimary: boolean;\n  includedServices: ServiceInterface[];\n  characteristics: CharacteristicInterface[];\n}\n\nexport interface AdvertismentDataInterface {\n  manufacturerData: Base64 | null;\n  serviceData: { [uuid: string]: Base64 } | null;\n  serviceUUIDs: Array<UUID> | null;\n  localName: string | null;\n  txPowerLevel: number | null;\n  solicitedServiceUUIDs: Array<UUID> | null;\n  isConnectable: boolean | null;\n  overflowServiceUUIDs: Array<UUID> | null;\n}\n\nexport interface PeripheralInterface extends NodeInterface {\n  advertismentData?: AdvertismentDataInterface;\n  name: string | null;\n  rssi: number | null;\n  state: PeripheralState;\n  canSendWriteWithoutResponse: boolean;\n  services: ServiceInterface[];\n  // Android\n  // mtu: number;\n  // JS\n  discoveryTimestamp?: number;\n}\n\nexport enum TransactionType {\n  get = 'get',\n  read = 'read',\n  write = 'write',\n  connect = 'connect',\n  disconnect = 'disconnect',\n  scan = 'scan',\n}\n\nexport type PeripheralFoundCallback = ((peripheral: PeripheralInterface) => void);\n\nexport type StateUpdatedCallback = (state: CentralState) => void;\n\nexport type ScanSettings = {\n  serviceUUIDsToQuery?: UUID[];\n  scanningOptions?: any; //TODO: Bacon:\n  callback?: PeripheralFoundCallback;\n};\n\nexport interface Central {\n  state: CentralState;\n  isScanning: boolean;\n}\n\nexport type WriteOptions = {\n  peripheralUUID: string;\n  serviceUUID: string;\n  characteristicUUID: string;\n  descriptorUUID?: string;\n  characteristicProperties: number;\n  shouldMute: boolean;\n  data: any;\n};\n"]}