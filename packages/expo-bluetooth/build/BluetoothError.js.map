{"version":3,"file":"BluetoothError.js","sourceRoot":"","sources":["../src/BluetoothError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAGzC,MAAM,OAAO,GAAG,gBAAgB,CAAC;AAEjC,MAAM,CAAC,OAAO,OAAO,cAAe,SAAQ,UAAU;IACpD,GAAG;QACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,MAAM;QACJ,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;IACJ,CAAC;IAED,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;QACxC,KAAK,CAAC,IAAI,IAAI,iBAAiB,EAAE,GAAG,OAAO,MAAM,OAAO,EAAE,CAAC,CAAC;QAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,KAAK,EAAE;YACT,+BAA+B;YAC/B,IAAI,CAAC,KAAK,GAAG,KAAK;iBACf,KAAK,CAAC,IAAI,CAAC;iBACX,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;iBACX,IAAI,CAAC,IAAI,CAAC,CAAC;SACf;IACH,CAAC;CACF;AAED,MAAM,OAAO,sBAAuB,SAAQ,cAAc;IAGxD,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE;QACvD,KAAK,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,MAAM;QACJ,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;QAE5B,OAAO;YACL,GAAG,IAAI;YACP,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CAAC;IACJ,CAAC;CACF;AAED,MAAM,OAAO,gBAAiB,SAAQ,cAAc;IAGlD,YAAY,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;QACpD,KAAK,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;CACF","sourcesContent":["import { CodedError } from 'expo-errors';\nimport { NativeError } from './Bluetooth.types';\n\nconst service = 'expo-bluetooth';\n\nexport default class BluetoothError extends CodedError implements NativeError {\n  log() {\n    console.log(JSON.stringify(this.toJSON(), null, 2));\n  }\n\n  toJSON(): { [key: string]: any } {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      stack: this.stack,\n    };\n  }\n\n  constructor({ name, message, stack, code }) {\n    super(code || 'ERR_BLE_UNKNOWN', `${service} : ${message}`);\n    this.name = name;\n    if (stack) {\n      // Just use the first few lines\n      this.stack = stack\n        .split('\\n')\n        .slice(0, 8)\n        .join('\\n');\n    }\n  }\n}\n\nexport class BluetoothPlatformError extends BluetoothError {\n  invokedMethod: string;\n\n  constructor({ name, message, stack, code, invokedMethod }) {\n    super({ name, code, message, stack });\n    this.invokedMethod = invokedMethod;\n  }\n\n  toJSON(): { [key: string]: any } {\n    const json = super.toJSON();\n\n    return {\n      ...json,\n      invokedMethod: this.invokedMethod,\n    };\n  }\n}\n\nexport class AndroidGATTError extends BluetoothError {\n  statusCode: GATTStatusCode;\n\n  constructor({ statusCode, name, message, stack, code }) {\n    super({ name, message, stack, code });\n    this.statusCode = statusCode;\n  }\n}\n"]}