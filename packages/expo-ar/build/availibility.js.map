{"version":3,"file":"availibility.js","sourceRoot":"","sources":["../src/availibility.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,MAAM,UAAU,WAAW;IACzB,OAAO;IACP,iDAAiD;IACjD,uBAAuB;IACvB,6FAA6F;IAC7F,gEAAgE;IAChE,sFAAsF;IACtF,MAAM;IACN,0CAA0C;IAC1C,kBAAkB;IAClB,IAAI;IAEJ,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,yBAAyB,GAAG;IAChC,SAAS,EAAE,gCAAgC;IAC3C,SAAS,EAAE,8EAA8E;IACzF,cAAc,EAAE,gDAAgD;CACjE,CAAC;AAEF,MAAM,UAAU,uBAAuB;IACrC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;QACvB,OAAO,yBAAyB,CAAC,SAAS,CAAC;KAC5C;SAAM,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QAChC,OAAO,GAAG,yBAAyB,CAAC,cAAc,IAAI,QAAQ,CAAC,EAAE,SAAS,CAAC;KAC5E;SAAM,IAAI,SAAS,CAAC,eAAe,GAAG,IAAI,EAAE;QAC3C,OAAO,GAAG,yBAAyB,CAAC,SAAS,IAAI,SAAS,CAAC,eAAe,SAAS,CAAC;KACrF;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,UAAU;IACxB,OAAO,QAAQ,CAAC,YAAY,CAAC;AAC/B,CAAC","sourcesContent":["import { Platform } from 'react-native';\nimport { Constants } from 'expo-constants';\n\nimport { NativeAR } from './NativeAR';\n\nexport function isAvailable(): boolean {\n  // if (\n  //   !Constants.isDevice || // Prevent Simulators\n  //   Platform.isTVOS ||\n  //   (Platform.OS === 'ios' && Constants.deviceYearClass < 2015) || // iOS device has A9 chip\n  //   // !ExpoAR.isSupported || // ARKit is included in the build\n  //   !ExpoAR.startAsync // Older SDK versions (27 and lower) that are fully compatible\n  // ) {\n  //   console.log('AR.isAvailable: false');\n  //   return false;\n  // }\n\n  return true;\n}\n\nconst AvailabilityErrorMessages = {\n  Simulator: `Cannot run EXGL in a simulator`,\n  ANineChip: `ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a`,\n  ARKitOnlyOnIOS: `ARKit can only run on an iOS device! This is a`,\n};\n\nexport function getUnavailabilityReason(): string {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return `${AvailabilityErrorMessages.ARKitOnlyOnIOS} ${Platform.OS} device`;\n  } else if (Constants.deviceYearClass < 2015) {\n    return `${AvailabilityErrorMessages.ANineChip} ${Constants.deviceYearClass} device`;\n  }\n  return 'Unknown Reason';\n}\n\nexport function getVersion(): string {\n  return NativeAR.ARKitVersion;\n}\n"]}