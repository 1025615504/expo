{"version":3,"file":"events.js","sourceRoot":"","sources":["../../src/lifecycle/events.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,QAAQ,EAAE,oBAAoB,EAAE,MAAM,aAAa,CAAC;AAG7D,MAAM,CAAN,IAAY,SAOX;AAPD,WAAY,SAAS;IACnB,wCAAiB,QAAQ,CAAC,cAAc,oBAAA,CAAA;IACxC,0CAAmB,QAAQ,CAAC,gBAAgB,sBAAA,CAAA;IAC5C,0CAAmB,QAAQ,CAAC,gBAAgB,sBAAA,CAAA;IAC5C,sDAA+B,QAAQ,CAAC,4BAA4B,kCAAA,CAAA;IACpE,+CAAwB,QAAQ,CAAC,qBAAqB,2BAAA,CAAA;IACtD,kDAA2B,QAAQ,CAAC,wBAAwB,8BAAA,CAAA;AAC9D,CAAC,EAPW,SAAS,KAAT,SAAS,QAOpB;AAED,MAAM,UAAU,gBAAgB,CAAC,QAA6B;IAC5D,OAAO,WAAW,CAAC,SAAS,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,QAA2C;IAC5E,OAAO,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AAC3D,CAAC;AAED,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,8BAAW,CAAA;IACX,oCAAiB,CAAA;IACjB,oCAAiB,CAAA;AACnB,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AAED,MAAM,UAAU,kBAAkB,CAAC,QAA4E;IAC7G,OAAO,WAAW,CAAC,SAAS,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AAC3D,CAAC;AAED,MAAM,CAAN,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,iCAAiC;IACjC,6DAA4C,CAAA;IAC5C,4DAA4D;IAC5D,mDAAkC,CAAA;IAClC,0BAA0B;IAC1B,iDAAgC,CAAA;AAClC,CAAC,EAPW,aAAa,KAAb,aAAa,QAOxB;AAED,MAAM,CAAN,IAAY,mBAeX;AAfD,WAAY,mBAAmB;IAC7B,+BAA+B;IAC/B,yDAAkC,CAAA;IAElC,6DAA6D;IAC7D,yEAAkD,CAAA;IAElD,mEAAmE;IACnE,+EAAwD,CAAA;IAExD,2EAA2E;IAC3E,yFAAkE,CAAA;IAElE,+DAA+D;IAC/D,yEAAkD,CAAA;AACpD,CAAC,EAfW,mBAAmB,KAAnB,mBAAmB,QAe9B;AAED,MAAM,UAAU,8BAA8B,CAAC,QAAqG;IAClJ,OAAO,WAAW,CAAC,SAAS,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;AACvE,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,QAA6B;IACnE,OAAO,WAAW,CAAC,SAAS,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;AAChE,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,QAA6B;IACtE,OAAO,WAAW,CAAC,SAAS,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;AACnE,CAAC;AAED,SAAS,WAAW,CAAC,SAAoB,EAAE,KAA+B;IACxE,OAAO,oBAAoB,CAAC,WAAW,CAAC,SAAgB,EAAE,KAAK,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,SAAqB;IACtD,oBAAoB,CAAC,kBAAkB,CAAC,SAAgB,CAAC,CAAC;AAC5D,CAAC","sourcesContent":["import { EmitterSubscription } from 'react-native';\n\nimport { NativeAR, NativeAREventEmitter } from '../NativeAR';\nimport { Anchor } from '../commons';\n\nexport enum EventType {\n  FrameDidUpdate = NativeAR.frameDidUpdate,\n  DidFailWithError = NativeAR.didFailWithError,\n  AnchorsDidUpdate = NativeAR.anchorsDidUpdate,\n  CameraDidChangeTrackingState = NativeAR.cameraDidChangeTrackingState,\n  SessionWasInterrupted = NativeAR.sessionWasInterrupted,\n  SessionInterruptionEnded = NativeAR.sessionInterruptionEnded,\n}\n\nexport function onFrameDidUpdate(listener: (event: {}) => void): EmitterSubscription {\n  return addListener(EventType.FrameDidUpdate, listener);\n}\n\nexport function onDidFailWithError(listener: (event: { error: Error }) => void): EmitterSubscription {\n  return addListener(EventType.DidFailWithError, listener);\n}\n\nexport enum AnchorEventType {\n  Add = 'add',\n  Update = 'update',\n  Remove = 'remove',\n}\n\nexport function onAnchorsDidUpdate(listener: (event: { eventType: AnchorEventType; anchors: Anchor[] }) => void): EmitterSubscription {\n  return addListener(EventType.AnchorsDidUpdate, listener);\n}\n\nexport enum TrackingState {\n  /** Tracking is not available. */\n  NotAvailable = 'ARTrackingStateNotAvailable',\n  /** Tracking is limited. See tracking reason for details. */\n  Limited = 'ARTrackingStateLimited',\n  /** Tracking is Normal. */\n  Normal = 'ARTrackingStateNormal',\n}\n\nexport enum TrackingStateReason {\n  /** Tracking is not limited. */\n  None = 'ARTrackingStateReasonNone',\n\n  /** Tracking is limited due to initialization in progress. */\n  Initializing = 'ARTrackingStateReasonInitializing',\n\n  /** Tracking is limited due to a excessive motion of the camera. */\n  ExcessiveMotion = 'ARTrackingStateReasonExcessiveMotion',\n\n  /** Tracking is limited due to a lack of features visible to the camera. */\n  InsufficientFeatures = 'ARTrackingStateReasonInsufficientFeatures',\n\n  /** Tracking is limited due to a relocalization in progress. */\n  Relocalizing = 'ARTrackingStateReasonRelocalizing',\n}\n\nexport function onCameraDidChangeTrackingState(listener: (event: { trackingState: TrackingState, trackingStateReason: TrackingStateReason }) => void): EmitterSubscription {\n  return addListener(EventType.CameraDidChangeTrackingState, listener);\n}\n\nexport function onSessionWasInterrupted(listener: (event: {}) => void): EmitterSubscription {\n  return addListener(EventType.SessionWasInterrupted, listener);\n}\n\nexport function onSessionInterruptionEnded(listener: (event: {}) => void): EmitterSubscription {\n  return addListener(EventType.SessionInterruptionEnded, listener);\n}\n\nfunction addListener(eventType: EventType, event: (...args: any[]) => void): EmitterSubscription {\n  return NativeAREventEmitter.addListener(eventType as any, event);\n}\n\nexport function removeAllListeners(eventType?: EventType): void {\n  NativeAREventEmitter.removeAllListeners(eventType as any);\n}\n"]}