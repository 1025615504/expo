{"version":3,"file":"hitTest.js","sourceRoot":"","sources":["../../src/features/hitTest.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAwCvC;;;;;;GAMG;AACH,MAAM,CAAN,IAAY,WA2BX;AA3BD,WAAY,WAAW;IACrB;;OAEG;IACH,4CAA6B,CAAA;IAC7B;;OAEG;IACH,kDAAmC,CAAA;IACnC;;OAEG;IACH,8CAA+B,CAAA;IAC/B;;OAEG;IACH,8CAA+B,CAAA;IAC/B;;;OAGG;IACH,oEAAqD,CAAA;IACrD;;;OAGG;IACH,wEAAyD,CAAA;AAC3D,CAAC,EA3BW,WAAW,KAAX,WAAW,QA2BtB;AAED;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,KAAc,EAAE,QAA4B,EAAE;IACtF,OAAO,QAAQ,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAChG,CAAC","sourcesContent":["import { NativeAR } from '../NativeAR';\nimport { Vector2, Anchor, Matrix4 } from '../commons';\n\nexport type HitTest = {\n  /**\n   * The position and orientation of the hit test result relative to the world coordinate system.\n   */\n  worldTransform: Matrix4;\n  \n  /**\n   * Distance from the camera to the hit location, in meters.\n   */\n  distance: number;\n  \n  /**\n   * The anchor representing the detected:\n   * - iOS: surface\n   * - Android: surface or point\n   */\n  anchor?: Anchor;\n\n  /**\n   * @only iOS\n   * The kind of detected feature the search result represents.\n   */\n  type?: number;\n\n  /**\n   * @only iOS\n   * The position and orientation of the hit test result relative to the nearest anchor or feature point.\n   */\n  localTransform?: Matrix4;\n\n  /**\n   * @only Android\n   * Unique number assigned specifically to this point.\n   */\n  id?: number;\n};\n\n/**\n * @only iOS\n * \n * Hit-Test Result Types\n * Possible types for specifying a hit-test search, or for the result of a hit-test search.\n * https://developer.apple.com/documentation/arkit/arhittestresulttype\n */\nexport enum HitTestType {\n  /**\n   * Result type from intersecting the nearest feature point.\n   */\n  FeaturePoint = 'featurePoint',\n  /**\n   * Result type from intersecting a horizontal plane estimate, determined for the current frame.\n   */\n  HorizontalPlane = 'horizontalPlane',\n  /**\n   * Result type from intersecting a vertical plane estimate, determined for the current frame.\n   */\n  VerticalPlane = 'verticalPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor.\n   */\n  ExistingPlane = 'existingPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * extent.\n   */\n  ExistingPlaneUsingExtent = 'existingPlaneUsingExtent',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * geometry.\n   */\n  ExistingPlaneUsingGeometry = 'existingPlaneUsingGeometry',\n}\n\n/**\n * Performs a ray cast from the user's device in the direction of given location\n * https://developers.google.com/ar/reference/java/com/google/ar/core/Frame#hitTest(float,%20float)\n * https://developer.apple.com/documentation/arkit/arframe/2875718-hittest\n * \n * @param point {@link Vector2}. A point in normalized screen coordinate space. (The point (0,0) represents the top left corner of the screen, and the point (1,1) represents the bottom right corner.)\n * @param types {@only iOS} {@link HitTestType}. Types of hit-test result to search for.\n * \n * @returns a promise resolving to list of results, sorted from nearest to farthest\n */\nexport async function performHitTestAsync(point: Vector2, types: Array<HitTestType> = []): Promise<HitTest[]> {\n  return NativeAR.performHitTestAsync(point.x, point.y, Array.isArray(types) ? types : [types]);\n}"]}