{"version":3,"file":"currentFrame.js","sourceRoot":"","sources":["../../src/features/currentFrame.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AASvC;;;GAGG;AACH,MAAM,CAAN,IAAY,cAMX;AAND,WAAY,cAAc;IACxB,qCAAmB,CAAA;IACnB,mCAAiB,CAAA;IACjB,uDAAqC,CAAA;IACrC,qDAAmC,CAAA;IACnC,yDAAuC,CAAA;AACzC,CAAC,EANW,cAAc,KAAd,cAAc,QAMzB;AA4BD,MAAM,CAAN,IAAY,gBAGX;AAHD,WAAY,gBAAgB;IAC1B,iDAA6B,CAAA;IAC7B,mDAA+B,CAAA;AACjC,CAAC,EAHW,gBAAgB,KAAhB,gBAAgB,QAG3B;AAED,MAAM,CAAN,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IAC3B,6DAAwC,CAAA;IACxC,6DAAwC,CAAA;AAC1C,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,QAG5B;AAoBD,MAAM,CAAN,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,kCAAqB,CAAA;IACrB,gEAAmD,CAAA;IACnD,oEAAuD,CAAA;AACzD,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;AAAA,CAAC;AA4BF;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,UAA6B;IACtE,OAAO,QAAQ,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import { NativeAR } from '../NativeAR';\nimport {\n  Anchor,\n  BlendShape,\n  Size,\n  Vector3,\n  Matrix4x4,\n} from '../commons';\n\n/**\n * Attributes that are available to be queried from current frame.\n * See {@link getCurrentFrameAsync}\n */\nexport enum FrameAttribute {\n  Anchors = 'anchors',\n  Planes = 'planes',\n  RawFeaturePoints = 'rawFeaturePoints',\n  LightEstimation = 'lightEstimation',\n  CapturedDepthData = 'capturedDepthData',\n}\n\ntype ARFrameAttributes = {\n  [FrameAttribute.Anchors]?: {\n    ARFaceTrackingConfiguration?: {\n      geometry?: boolean;\n      blendShapes?: boolean | BlendShape[];\n    };\n  };\n  [FrameAttribute.RawFeaturePoints]?: boolean;\n  [FrameAttribute.LightEstimation]?: boolean;\n  [FrameAttribute.CapturedDepthData]?: boolean;\n};\n\ntype RawFeaturePoint = {\n  x: number;\n  y: number;\n  z: number;\n  id: string;\n};\n\ntype LightEstimation = {\n  ambientIntensity: number;\n  ambientColorTemperature: number;\n  primaryLightDirection?: Vector3;\n  primaryLightIntensity?: number;\n};\n\nexport enum DepthDataQuality {\n  Low = 'AVDepthDataQualityLow',\n  High = 'AVDepthDataQualityHigh',\n}\n\nexport enum DepthDataAccuracy {\n  Absolute = 'AVDepthDataAccuracyAbsolute',\n  Relative = 'AVDepthDataAccuracyRelative',\n}\n\nexport type CameraCalibrationData = {\n  intrinsicMatrix: number[];\n  intrinsicMatrixReferenceDimensions: Size;\n  extrinsicMatrix: number[];\n  pixelSize: number;\n  lensDistortionLookupTable: any;\n  inverseLensDistortionLookupTable: any;\n  lensDistortionCenter: Vector3;\n};\n\ntype CapturedDepthData = {\n  timestamp: number;\n  depthDataQuality: DepthDataQuality;\n  depthDataAccuracy: DepthDataAccuracy;\n  depthDataFiltered: boolean;\n  cameraCalibrationData: CameraCalibrationData;\n};\n\nexport enum PlaneType {\n  VERTICAL = 'vertical',\n  HORIZONTAL_UPWARD_FACING = 'horizontalUpwardFacing',\n  HORIZONTAL_DOWNWARD_FACING = 'horizontalDownwardFacing'\n};\n\ntype Plane = {\n  id: number;\n  transformWorld: Matrix4x4;\n  extend: {\n    width: number;\n    length: number;\n  };\n  center: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  parent?: Plane;\n  planeType: PlaneType;\n  anchors?: Anchor[];\n};\n\ntype ARFrame = {\n  timestamp: number;\n  [FrameAttribute.Anchors]?: Anchor[] | null;\n  [FrameAttribute.RawFeaturePoints]?: RawFeaturePoint[] | null;\n  [FrameAttribute.Planes]?: Plane[] | null;\n  [FrameAttribute.LightEstimation]?: LightEstimation | null;\n  [FrameAttribute.CapturedDepthData]?: CapturedDepthData | null;\n};\n\n/**\n * Requests data from current frame.\n * @param attributes Specification which data to query from frame.\n */\nexport async function getCurrentFrameAsync(attributes: ARFrameAttributes): Promise<ARFrame> {\n  return NativeAR.getCurrentFrameAsync(attributes);\n}\n"]}