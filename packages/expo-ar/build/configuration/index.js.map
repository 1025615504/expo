{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/configuration/index.ts"],"names":[],"mappings":"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","sourcesContent":["declare global {\n  class WebGLTexture {\n    constructor(textureID: number);\n  }\n}\n\nimport { Dimensions, Platform } from 'react-native';\n\nimport { NativeAR } from '../NativeAR';\nimport { TrackingConfiguration, Matrix4, Size } from '../commons';\n\n/**\n * Get WebGLTexture that camera device is rendering it's preview to.\n */\nexport async function getCameraTextureAsync(): Promise<WebGLTexture> {\n  const capturedCameraTexture = await NativeAR.getCameraTextureAsync();\n  return new WebGLTexture(capturedCameraTexture);\n}\n\n/**\n * @only iOS\n * \n * Check whether provided configuration is valid on device.\n * @param configuration {@link TrackingConfiguration}\n */\nexport function isConfigurationAvailable(configuration: TrackingConfiguration): boolean {\n  const { width, height } = Dimensions.get('window');\n  // @ts-ignore: re-evaluate this for the new iPhones (2018)\n  const isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n  if (configuration === TrackingConfiguration.Face && isX) {\n    return true;\n  }\n  return !!NativeAR[configuration];\n}\n\n/**\n * Checks whether front camera is available for AR processing.\n */\nexport function isFrontCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\n\n/**\n * Checks whether rear caemra is avavilable for AR processing.\n */\nexport function isRearCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}\n\n/**\n * @only iOS\n * \n * Defines motion and scene tracking behaviors for the session. \n * @param configuration {@link TrackingConfiguration}.\n * https://developer.apple.com/documentation/arkit/arconfiguration\n */\nexport async function setConfigurationAsync(configuration: TrackingConfiguration): Promise<void> {\n  await NativeAR.setConfigurationAsync(configuration);\n}\n\n/**\n * Options for whether and how AR detects flat surfaces in captured images.\n * @iOS ARKit\n * https://developer.apple.com/documentation/arkit/arplanedetection\n * \n * @Android ARCore\n * https://developers.google.com/ar/reference/java/com/google/ar/core/Config.PlaneFindingMode\n */\nexport enum PlaneDetection {\n  /**\n   * No plane detection is run.\n   */\n  None = 'none',\n  \n  /**\n   * Plane detection determines horizontal planes in the scene.\n   */\n  Horizontal = 'horizontal',\n  \n  /**\n   * Plane detection determines vertical planes in the scene.\n   */\n  Vertical = 'vertical',\n\n  /**\n   * @only Android\n   * Detection both horizontal and vertical planes.\n   */\n  HorizontalAndVertical = 'horizontal_and_vertical',\n}\n\n/**\n * Choose plane detection mode.\n * @param planeDetection {@link PlaneDetection}\n */\nexport async function setPlaneDetectionAsync(planeDetection: PlaneDetection): Promise<void> {\n  return NativeAR.setPlaneDetectionAsync(planeDetection);\n}\n\n/**\n * Get current plane detection mode.\n */\nexport function getPlaneDetection(): Promise<PlaneDetection> {\n  return NativeAR.getPlaneDetection();\n}\n\n/**\n * @only iOS\n * \n * @param matrix 4x4 float matrix that defines world origin\n */\nexport async function setWorldOriginAsync(matrix: Matrix4): Promise<void> {\n  return await NativeAR.setWorldOriginAsync(matrix);\n}\n\n\n/**\n * @only iOS\n * \n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arworldalignment\n */\nexport enum WorldAlignment {\n  /**\n   * Aligns the world with gravity that is defined by vector (0, -1, 0).\n   */\n  Gravity = 'gravity',\n\n  /**\n   * Aligns the world with gravity that is defined by the vector (0, -1, 0)\n   * and heading (w.r.t. true north) that is given by the vector (0, 0, -1).\n   */\n  GravityAndHeading = 'gravityAndHeading',\n\n  /**\n   * Aligns the world with the cameraâ€™s orientation.\n   */\n  AlignmentCamera = 'alignmentCamera',\n}\n\n/**\n * @only iOS\n * \n * Sets world alignment.\n * @param worldAlignment {@link WorldAlignment}\n */\nexport async function setWorldAlignment(worldAlignment: WorldAlignment): Promise<void> {\n  return NativeAR.setWorldAlignment(worldAlignment);\n}\n\n/**\n * @only iOS\n * \n * Gets world alignment.\n */\nexport async function getWorldAlignment(): Promise<WorldAlignment> {\n  return NativeAR.getWorldAlignment();\n}\n\n/**\n * @only iOS\n * \n * Intructs whether to use autofocus.\n * @param isAutoFocusEnabled \n */\nexport async function setAutoFocusEnabled(isAutoFocusEnabled: boolean): Promise<void> {\n  return NativeAR.setAutoFocusEnabled(isAutoFocusEnabled);\n}\n\n/**\n * @only iOS\n * \n * Checks whether autofocus is enabled.\n */\nexport async function getAutoFocusEnabled(): Promise<boolean> {\n  return NativeAR.getAutoFocusEnabled();\n}\n\n/**\n * @only iOS\n * \n * Instructs whether to enable light estimation.\n * @param isLightEstimationEnabled \n */\nexport async function setLightEstimationEnabled(isLightEstimationEnabled: boolean): Promise<void> {\n  return NativeAR.setLightEstimationEnabled(isLightEstimationEnabled);\n}\n\n/**\n * @only iOS\n * \n * Checks whether light estimation is enabled.\n */\nexport async function getLightEstimationEnabled(): Promise<boolean> {\n  return NativeAR.getLightEstimationEnabled();\n}\n\n/**\n * @only iOS\n * \n * Sets whether AR should provide audio data.\n * @param providesAudioData \n */\nexport async function setProvidesAudioData(providesAudioData: boolean): Promise<void> {\n  return NativeAR.setProvidesAudioData(providesAudioData);\n}\n\n/**\n * @only iOS\n * \n * Checks whether AR provides audio data.\n */\nexport async function getProvidesAudioData(): Promise<boolean> {\n  return NativeAR.getProvidesAudioData();\n}\n\nexport type VideoFormat = {\n  type: string,\n  imageResolution: Size,\n  framesPerSecond: number,\n};\n\n/**\n * @only iOS\n * @param configuration \n */\nexport function getSupportedVideoFormats(configuration: TrackingConfiguration): VideoFormat[] {\n  const videoFormats = {\n    [TrackingConfiguration.World]: 'WorldTrackingVideoFormats',\n    [TrackingConfiguration.Orientation]: 'OrientationTrackingVideoFormats',\n    [TrackingConfiguration.Face]: 'FaceTrackingVideoFormats',\n  };\n  const videoFormat = videoFormats[configuration];\n  return NativeAR[videoFormat] || [];\n}"]}