{"version":3,"file":"commons.js","sourceRoot":"","sources":["../src/commons.ts"],"names":[],"mappings":"AAuBA,MAAM,CAAN,IAAY,UAKX;AALD,WAAY,UAAU;IACpB,mCAAqB,CAAA;IACrB,qCAAuB,CAAA;IACvB,qCAAuB,CAAA;IACvB,iCAAmB,CAAA;AACrB,CAAC,EALW,UAAU,KAAV,UAAU,QAKrB;AAgBD,MAAM,CAAN,IAAY,UAoDX;AApDD,WAAY,UAAU;IACpB,sCAAwB,CAAA;IACxB,sCAAwB,CAAA;IACxB,yCAA2B,CAAA;IAC3B,4CAA8B,CAAA;IAC9B,4CAA8B,CAAA;IAC9B,qCAAuB,CAAA;IACvB,4CAA8B,CAAA;IAC9B,4CAA8B,CAAA;IAC9B,sCAAwB,CAAA;IACxB,sCAAwB,CAAA;IACxB,4CAA8B,CAAA;IAC9B,4CAA8B,CAAA;IAC9B,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;IAC1B,0CAA4B,CAAA;IAC5B,0CAA4B,CAAA;IAC5B,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;IAC1B,oCAAsB,CAAA;IACtB,oCAAsB,CAAA;IACtB,uCAAyB,CAAA;IACzB,iCAAmB,CAAA;IACnB,iCAAmB,CAAA;IACnB,mCAAqB,CAAA;IACrB,uCAAyB,CAAA;IACzB,4CAA8B,CAAA;IAC9B,4CAA8B,CAAA;IAC9B,0CAA4B,CAAA;IAC5B,0CAA4B,CAAA;IAC5B,yCAA2B,CAAA;IAC3B,qCAAuB,CAAA;IACvB,kDAAoC,CAAA;IACpC,kDAAoC,CAAA;IACpC,0CAA4B,CAAA;IAC5B,0CAA4B,CAAA;IAC5B,yCAA2B,CAAA;IAC3B,uCAAyB,CAAA;IACzB,+CAAiC,CAAA;IACjC,+CAAiC,CAAA;IACjC,iDAAmC,CAAA;IACnC,iDAAmC,CAAA;IACnC,0CAA4B,CAAA;IAC5B,0CAA4B,CAAA;IAC5B,8CAAgC,CAAA;IAChC,8CAAgC,CAAA;IAChC,8CAAgC,CAAA;IAChC,8CAAgC,CAAA;IAChC,wCAA0B,CAAA;IAC1B,wCAA0B,CAAA;AAC5B,CAAC,EApDW,UAAU,KAAV,UAAU,QAoDrB;AAgBD;;;;;GAKG;AACH,MAAM,CAAN,IAAY,qBAkBX;AAlBD,WAAY,qBAAqB;IAC/B;;;OAGG;IACH,+DAAsC,CAAA;IAEtC;;;OAGG;IACH,2EAAkD,CAAA;IAElD;;;OAGG;IACH,6DAAoC,CAAA;AACtC,CAAC,EAlBW,qBAAqB,KAArB,qBAAqB,QAkBhC","sourcesContent":["export type Vector2 = {\n  x: number;\n  y: number;\n};\n\nexport type Vector3 = {\n  x: number;\n  y: number;\n  z: number;\n};\n\nexport type Size = {\n  width: number;\n  height: number;\n};\n\nexport type Matrix4x4 = [\n  number, number, number, number,\n  number, number, number, number,\n  number, number, number, number,\n  number, number, number, number\n];\n\nexport enum AnchorType {\n  Face = 'ARFaceAnchor',\n  Image = 'ARImageAnchor',\n  Plane = 'ARPlaneAnchor',\n  Anchor = 'ARAnchor',\n}\n\ntype TextureCoordinate = {\n  u: number;\n  v: number;\n};\n\ntype FaceGeometry = {\n  vertexCount: number;\n  textureCoordinateCount: number;\n  triangleCount: number;\n  vertices: Vector3[];\n  textureCoordinates: TextureCoordinate[];\n  triangleIndices: number[];\n};\n\nexport enum BlendShape {\n  BrowDownL = 'browDown_L',\n  BrowDownR = 'browDown_R',\n  BrowInnerUp = 'browInnerUp',\n  BrowOuterUpL = 'browOuterUp_L',\n  BrowOuterUpR = 'browOuterUp_R',\n  CheekPuff = 'cheekPuff',\n  CheekSquintL = 'cheekSquint_L',\n  CheekSquintR = 'cheekSquint_R',\n  EyeBlinkL = 'eyeBlink_L',\n  EyeBlinkR = 'eyeBlink_R',\n  EyeLookDownL = 'eyeLookDown_L',\n  EyeLookDownR = 'eyeLookDown_R',\n  EyeLookInL = 'eyeLookIn_L',\n  EyeLookInR = 'eyeLookIn_R',\n  EyeLookOutL = 'eyeLookOut_L',\n  EyeLookOutR = 'eyeLookOut_R',\n  EyeLookUpL = 'eyeLookUp_L',\n  EyeLookUpR = 'eyeLookUp_R',\n  EyeSquintL = 'eyeSquint_L',\n  EyeSquintR = 'eyeSquint_R',\n  EyeWideL = 'eyeWide_L',\n  EyeWideR = 'eyeWide_R',\n  JawForward = 'jawForward',\n  JawLeft = 'jawLeft',\n  JawOpen = 'jawOpen',\n  JawRight = 'jawRight',\n  MouthClose = 'mouthClose',\n  MouthDimpleL = 'mouthDimple_L',\n  MouthDimpleR = 'mouthDimple_R',\n  MouthFrownL = 'mouthFrown_L',\n  MouthFrownR = 'mouthFrown_R',\n  MouthFunnel = 'mouthFunnel',\n  MouthLeft = 'mouthLeft',\n  MouthLowerDownL = 'mouthLowerDown_L',\n  MouthLowerDownR = 'mouthLowerDown_R',\n  MouthPressL = 'mouthPress_L',\n  MouthPressR = 'mouthPress_R',\n  MouthPucker = 'mouthPucker',\n  MouthRight = 'mouthRight',\n  MouthRollLower = 'mouthRollLower',\n  MouthRollUpper = 'mouthRollUpper',\n  MouthShrugLower = 'mouthShrugLower',\n  MouthShrugUpper = 'mouthShrugUpper',\n  MouthSmileL = 'mouthSmile_L',\n  MouthSmileR = 'mouthSmile_R',\n  MouthStretchL = 'mouthStretch_L',\n  MouthStretchR = 'mouthStretch_R',\n  MouthUpperUpL = 'mouthUpperUp_L',\n  MouthUpperUpR = 'mouthUpperUp_R',\n  NoseSneerL = 'noseSneer_L',\n  NoseSneerR = 'noseSneer_R',\n}\n\nexport type Anchor = {\n  type: AnchorType;\n  transformWorld: Matrix4x4;\n  id: string;\n  center?: Vector3;\n  extent?: { width: number; length: number };\n  image?: {\n    name: string | null;\n    size: Size;\n  };\n  geometry?: FaceGeometry;\n  blendShapes?: { [shape in BlendShape]?: number };\n};\n\n/**\n * @only iOS\n * \n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * {@link https://developer.apple.com/documentation/arkit/arconfiguration}\n */\nexport enum TrackingConfiguration {\n  /**\n   * Provides high-quality AR experiences that use the rear-facing camera precisely track a device's\n   * position and orientation and allow plane detection and hit testing.\n   */\n  World = 'ARWorldTrackingConfiguration',\n\n  /**\n   * Provides basic AR experiences that use the rear-facing camera and track only a device's\n   * orientation.\n   */\n  Orientation = 'AROrientationTrackingConfiguration',\n\n  /**\n   * Provides AR experiences that use the front-facing camera and track the movement and expressions\n   * of the user's face.\n   */\n  Face = 'ARFaceTrackingConfiguration',\n}\n"]}