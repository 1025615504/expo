{"version":3,"file":"calculations.js","sourceRoot":"","sources":["../../src/AR/calculations.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport * as AR from 'expo-ar';\n\nexport class HitTestRay {\n  origin = new THREE.Vector3();\n  direction = new THREE.Vector3();\n}\n\nexport class FeatureHitTestResult {\n  position; //Vector3\n  distanceToRayOrigin;\n  featureHit; //Vector3\n  featureDistanceToHitResult;\n}\n\n/*\n  ExpoTHREE.AR.suppressWarnings()\n  */\nexport function suppressWarnings() {\n  console.log(\"Warning: ExpoTHREE.AR.suppressWarnings() is deprecated, use: THREE.suppressExpoWarnings()\")\n}\n\n//-> [FeatureHitTestResult]\nexport async function hitTestWithFeatures(\n  camera: THREE.Camera,\n  point: THREE.Vector2,\n  coneOpeningAngleInDegrees: number,\n  minDistance: number = 0,\n  maxDistance: number = 99999999999999,\n  maxResults: number = 1,\n  rawFeaturePoints?: AR.RawFeaturePoint[]\n): Promise<FeatureHitTestResult[]> {\n  let results: FeatureHitTestResult[] = [];\n\n  const featurePoints = await getRawFeaturePoints(rawFeaturePoints);\n  if (featurePoints.length === 0) {\n    return results;\n  }\n\n  const ray = hitTestRayFromScreenPos(camera, point);\n  if (!ray) {\n    return results;\n  }\n\n  const maxAngleInDeg = Math.min(coneOpeningAngleInDegrees, 360) / 2;\n  const maxAngle = (maxAngleInDeg / 180) * Math.PI;\n\n  for (let feature of featurePoints) {\n    const { x, y, z } = feature;\n\n    let featurePos = new THREE.Vector3(x, y, z);\n\n    let originToFeature = featurePos.clone().sub(ray.origin);\n\n    let crossProduct = originToFeature.clone().cross(ray.direction);\n    let featureDistanceFromResult = crossProduct.length();\n\n    const hitTestResult = ray.origin\n      .clone()\n      .add(\n        ray.direction\n          .clone()\n          // @ts-ignore\n          .multiply(ray.direction.clone().dot(originToFeature))\n      );\n\n    const hitTestResultDistance = hitTestResult\n      .clone()\n      .sub(ray.origin)\n      .length();\n\n    if (\n      hitTestResultDistance < minDistance ||\n      hitTestResultDistance > maxDistance\n    ) {\n      // Skip this feature - it is too close or too far away.\n      continue;\n    }\n\n    const originToFeatureNormalized = originToFeature.clone().normalize();\n    const angleBetweenRayAndFeature = Math.acos(\n      ray.direction.clone().dot(originToFeatureNormalized)\n    );\n\n    if (angleBetweenRayAndFeature > maxAngle) {\n      // Skip this feature - is is outside of the hit test cone.\n      continue;\n    }\n\n    // All tests passed: Add the hit against this feature to the results.\n    let featureHitTestResult = new FeatureHitTestResult();\n    featureHitTestResult.position = hitTestResult;\n    featureHitTestResult.distanceToRayOrigin = hitTestResultDistance;\n    featureHitTestResult.featureHit = featurePos;\n    featureHitTestResult.featureDistanceToHitResult = featureDistanceFromResult;\n\n    results.push(featureHitTestResult);\n  }\n\n  // Sort the results by feature distance to the ray.\n  results = results.sort(\n    (first, second) => first.distanceToRayOrigin < second.distanceToRayOrigin ? -1 : +1\n  );\n\n  // Cap the list to maxResults.\n  var cappedResults: FeatureHitTestResult[] = [];\n  let i = 0;\n  while (i < maxResults && i < results.length) {\n    cappedResults.push(results[i]);\n    i += 1;\n  }\n\n  return cappedResults;\n}\n\n//-> [FeatureHitTestResult]\nexport async function hitTestWithPoint(\n  camera: THREE.Camera,\n  point: THREE.Vector2\n): Promise<FeatureHitTestResult[]> {\n  var results: FeatureHitTestResult[] = [];\n  const ray = hitTestRayFromScreenPos(camera, point);\n\n  const result = await hitTestFromOrigin(ray.origin, ray.direction);\n  if (result !== null) {\n    results.push(result);\n  }\n\n  return results;\n}\n\nexport function unprojectPoint(\n  camera: THREE.Camera,\n  point: THREE.Vector3\n): THREE.Vector3 {\n  let vector = point.clone();\n  // @ts-ignore\n  const widthHalf = camera.width / 2;\n  // @ts-ignore\n  const heightHalf = camera.height / 2;\n\n  vector.project(camera);\n\n  vector.x = vector.x * widthHalf + widthHalf;\n  vector.y = -(vector.y * heightHalf) + heightHalf;\n  vector.z = 0;\n\n  return vector;\n}\n\nexport function hitTestRayFromScreenPos(camera: THREE.Camera, point: THREE.Vector2): HitTestRay {\n  const cameraPos = positionFromTransform(camera.matrix);\n\n  // Note: z: 1.0 will unproject() the screen position to the far clipping plane.\n  let positionVec = new THREE.Vector3(point.x, point.y, 1.0);\n  let screenPosOnFarClippingPlane = unprojectPoint(camera, positionVec);\n  screenPosOnFarClippingPlane.sub(cameraPos);\n  screenPosOnFarClippingPlane.normalize();\n  const hitTest = new HitTestRay();\n  hitTest.origin = cameraPos;\n  hitTest.direction = screenPosOnFarClippingPlane;\n  return hitTest;\n}\n\nasync function getRawFeaturePoints(rawFeaturePoints?: AR.RawFeaturePoint[]): Promise<AR.RawFeaturePoint[]> {\n  if (rawFeaturePoints) {\n    return rawFeaturePoints;\n  }\n  const currentFrame = await AR.getCurrentFrameAsync({ [AR.FrameAttribute.RawFeaturePoints]: true });\n  return currentFrame[AR.FrameAttribute.RawFeaturePoints] || [];\n}\n\n//-> FeatureHitTestResult?\nexport async function hitTestFromOrigin(\n  origin: THREE.Vector3,\n  direction: THREE.Vector3,\n  rawFeaturePoints?: AR.RawFeaturePoint[]\n): Promise<FeatureHitTestResult | null> {\n  let featurePoints = await getRawFeaturePoints(rawFeaturePoints);\n  if (featurePoints.length === 0) {\n    return null;\n  }\n\n  // Determine the point from the whole point cloud which is closest to the hit test ray.\n  var closestFeaturePoint = origin;\n  var minDistance = 99999999999;\n\n  for (let feature of featurePoints) {\n    const { x, y, z, id } = feature;\n    let featurePos = new THREE.Vector3(x, y, z);\n\n    let originVector = origin.clone().sub(featurePos);\n    let crossProduct = originVector.clone().cross(direction);\n    let featureDistanceFromResult = crossProduct.length();\n\n    if (featureDistanceFromResult < minDistance) {\n      closestFeaturePoint = featurePos;\n      minDistance = featureDistanceFromResult;\n    }\n  }\n\n  // Compute the point along the ray that is closest to the selected feature.\n  let originToFeature = closestFeaturePoint.clone().sub(origin);\n  let hitTestResult = origin\n    .clone()\n    // @ts-ignore\n    .add(direction.clone().multiply(direction.clone().dot(originToFeature)));\n  let hitTestResultDistance = hitTestResult\n    .clone()\n    .sub(origin)\n    .length();\n\n  let featureHitTestResult = new FeatureHitTestResult();\n\n  featureHitTestResult.position = hitTestResult;\n  featureHitTestResult.distanceToRayOrigin = hitTestResultDistance;\n  featureHitTestResult.featureHit = closestFeaturePoint;\n  featureHitTestResult.featureDistanceToHitResult = minDistance;\n  return featureHitTestResult;\n}\n\nexport function hitTestWithInfiniteHorizontalPlane(\n  camera: THREE.Camera,\n  point: THREE.Vector2,\n  pointOnPlane: THREE.Vector3\n) {\n  const ray = hitTestRayFromScreenPos(camera, point);\n  if (!ray) {\n    return null;\n  }\n\n  // Do not intersect with planes above the camera or if the ray is almost parallel to the plane.\n  if (ray.direction.y > -0.03) {\n    return null;\n  }\n\n  // Return the intersection of a ray from the camera through the screen position with a horizontal plane\n  // at height (Y axis).\n  return rayIntersectionWithHorizontalPlane(\n    ray.origin,\n    ray.direction,\n    pointOnPlane.y\n  );\n}\n\nexport function rayIntersectionWithHorizontalPlane(\n  rayOrigin: THREE.Vector3,\n  direction: THREE.Vector3,\n  planeY: number\n): THREE.Vector3 | null {\n  direction = direction.normalize();\n\n  // Special case handling: Check if the ray is horizontal as well.\n  if (direction.y == 0) {\n    if (rayOrigin.y == planeY) {\n      // The ray is horizontal and on the plane, thus all points on the ray intersect with the plane.\n      // Therefore we simply return the ray origin.\n      return rayOrigin;\n    } else {\n      // The ray is parallel to the plane and never intersects.\n      return null;\n    }\n  }\n\n  // The distance from the ray's origin to the intersection point on the plane is:\n  //   (pointOnPlane - rayOrigin) dot planeNormal\n  //  --------------------------------------------\n  //          direction dot planeNormal\n\n  // Since we know that horizontal planes have normal (0, 1, 0), we can simplify this to:\n  let dist = (planeY - rayOrigin.y) / direction.y;\n\n  // Do not return intersections behind the ray's origin.\n  if (dist < 0) {\n    return null;\n  }\n  // Return the intersection point.\n  // @ts-ignore\n  direction.multiply(dist);\n  return rayOrigin.clone().add(direction);\n}\n\nexport function convertTransformArray(transform: AR.Matrix4x4): THREE.Matrix4 {\n  const matrix = new THREE.Matrix4();\n  matrix.fromArray(transform);\n  return matrix;\n}\n\nexport function positionFromTransform(transform: THREE.Matrix4): THREE.Vector3 {\n  const position = new THREE.Vector3();\n  position.setFromMatrixPosition(transform);\n  return position;\n}\n\n//-> (position: SCNVector3?, planeAnchor: ARPlaneAnchor?, hitAPlane: Bool)\n// Code from Apple PlacingObjects demo: https://developer.apple.com/sample-code/wwdc/2017/PlacingObjects.zip\nexport async function worldPositionFromScreenPosition(\n  camera: THREE.Camera,\n  position: THREE.Vector2,\n  objectPos: THREE.Vector3,\n  infinitePlane = false,\n  dragOnInfinitePlanesEnabled = false,\n  rawFeaturePoints?: AR.RawFeaturePoint[]\n) {\n  // -------------------------------------------------------------------------------\n  // 1. Always do a hit test against exisiting plane anchors first.\n  //    (If any such anchors exist & only within their extents.)\n\n  const hitTestResults = await AR.performHitTestAsync(\n    {\n      x: position.x,\n      y: position.y,\n    },\n    [AR.HitTestType.ExistingPlaneUsingExtent]\n  );\n  if (hitTestResults.length > 0) {\n    const { worldTransform, anchor } = hitTestResults[0];\n    const transform = convertTransformArray(worldTransform);\n    const worldPosition = positionFromTransform(transform);\n    // Return immediately - this is the best possible outcome.\n    return {\n      worldPosition,\n      planeAnchor: anchor,\n      hitAPlane: true,\n    };\n  }\n\n  // -------------------------------------------------------------------------------\n  // 2. Collect more information about the environment by hit testing against\n  //    the feature point cloud, but do not return the result yet.\n  let featureHitTestPosition = new THREE.Vector3();\n  let highQualityFeatureHitTestResult = false;\n\n  const highQualityfeatureHitTestResults = await hitTestWithFeatures(\n    camera,\n    position,\n    18,\n    0.2,\n    2.0,\n    1,\n    rawFeaturePoints\n  );\n\n  if (highQualityfeatureHitTestResults.length > 0) {\n    const result = highQualityfeatureHitTestResults[0];\n    featureHitTestPosition = result.position;\n    highQualityFeatureHitTestResult = true;\n  }\n\n  // -------------------------------------------------------------------------------\n  // 3. If desired or necessary (no good feature hit test result): Hit test\n  //    against an infinite, horizontal plane (ignoring the real world).\n  if (\n    (infinitePlane && dragOnInfinitePlanesEnabled) ||\n    !highQualityFeatureHitTestResult\n  ) {\n    let pointOnPlane = objectPos || new THREE.Vector3();\n\n    let pointOnInfinitePlane = hitTestWithInfiniteHorizontalPlane(\n      camera,\n      position,\n      pointOnPlane\n    );\n    if (pointOnInfinitePlane) {\n      return { worldPosition: pointOnInfinitePlane, hitAPlane: true };\n    }\n  }\n\n  // -------------------------------------------------------------------------------\n  // 4. If available, return the result of the hit test against high quality\n  //    features if the hit tests against infinite planes were skipped or no\n  //    infinite plane was hit.\n  if (highQualityFeatureHitTestResult) {\n    return { worldPosition: featureHitTestPosition, hitAPlane: false };\n  }\n\n  // -------------------------------------------------------------------------------\n  // 5. As a last resort, perform a second, unfiltered hit test against features.\n  //    If there are no features in the scene, the result returned here will be nil.\n\n  const unfilteredFeatureHitTestResults = await hitTestWithPoint(camera, position);\n  if (unfilteredFeatureHitTestResults.length > 0) {\n    let result = unfilteredFeatureHitTestResults[0];\n    return { worldPosition: result.position, hitAPlane: false };\n  }\n\n  return { worldPosition: null, planeAnchor: null, hitAPlane: null };\n}\n\nexport function positionFromAnchor({ transformWorld }: AR.Anchor): THREE.Vector3 {\n  const transform = convertTransformArray(transformWorld);\n  const position = positionFromTransform(transform);\n  return position;\n}\n\nexport async function improviseHitTest(point, camera: THREE.Camera): Promise<THREE.Vector3> {\n  const hitTestResults = await AR.performHitTestAsync(\n    point,\n    [AR.HitTestType.HorizontalPlane]\n  );\n\n  if (hitTestResults.length > 0) {\n    const { worldTransform } = hitTestResults[0];\n    return positionFromTransform(convertTransformArray(worldTransform));\n  } else {\n    // Create a transform with a translation of 0.1 meters (10 cm) in front of the camera\n    const dist = 0.1;\n    const translation = new THREE.Vector3(0, 0, -dist);\n    translation.applyQuaternion(camera.quaternion);\n    return translation;\n  }\n}\n"]}