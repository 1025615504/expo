{"version":3,"file":"Points.js","sourceRoot":"","sources":["../../src/AR/Points.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,SAAS,CAAC;AAC9B,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAO9B,CAAC;AAID,CAAC;AAEF,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,KAAK,CAAC,QAAQ;IAAlD;;QACE,iBAAY,GAAoB,EAAE,CAAC;QACnC,eAAU,GAAgB,EAAE,CAAC;QAC7B,aAAQ,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC;YAClC,IAAI,EAAE,EAAE;YACR,eAAe,EAAE,KAAK;YACtB,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QAmCH,WAAM,GAAG,KAAK,IAAI,EAAE;YAClB,MAAM,EACJ,CAAC,EAAE,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE,MAAM,GAC7C,GAAG,MAAM,EAAE,CAAC,oBAAoB,CAAC;gBAChC,CAAC,EAAE,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE,IAAI;aAC3C,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;QAC7B,CAAC,CAAC;IACJ,CAAC;IA1CC,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,MAAM,CAAC,aAAa;QACtB,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC;QAChC,MAAM,SAAS,GAAG,EAAE,CAAC;QAErB,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;YACxC,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACxC,IAAI,WAAW,EAAE;gBACf,uBAAuB;gBACvB,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,sCAAsC;aACrE;iBAAM;gBACL,6BAA6B;gBAC7B,MAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACtC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACnD,WAAW,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACxD,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;aACvB;YACD,cAAc;YACd,SAAS,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;YAC5B,iCAAiC;YACjC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,+BAA+B;QAC/B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CACvD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CACnB,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;IAChC,CAAC;CAWF","sourcesContent":["import * as AR from 'expo-ar';\nimport * as THREE from 'three';\n\ninterface PointData {\n  x: number;\n  y: number;\n  z: number;\n  id: string;\n};\n\ninterface PointsContainer {\n  [key: string]: THREE.Object3D;\n};\n\nexport default class Points extends THREE.Object3D {\n  storedPoints: PointsContainer = {};\n  pointsData: PointData[] = [];\n  material = new THREE.PointsMaterial({\n    size: 20,\n    sizeAttenuation: false,\n    color: 0xff00ff,\n  });\n\n  get points() {\n    return this.pointsData;\n  }\n\n  set points(newPointsData) {\n    this.pointsData = newPointsData;\n    const newPoints = {};\n\n    newPointsData.forEach(({ x, y, z, id }) => {\n      let pointObject = this.storedPoints[id];\n      if (pointObject) {\n        // point already exists\n        delete this.storedPoints[id]; // remove point from orginal container\n      } else {\n        // no such point - create one\n        const geometry = new THREE.Geometry();\n        geometry.vertices.push(new THREE.Vector3(0, 0, 0));\n        pointObject = new THREE.Points(geometry, this.material);\n        this.add(pointObject);\n      }\n      // store point\n      newPoints[id] = pointObject;\n      // update position of pointObject\n      pointObject.position.set(x, y, z);\n    });\n\n    // remove old points from THREE\n    Object.entries(this.storedPoints).forEach(([_, point]) =>\n      this.remove(point)\n    );\n    this.storedPoints = newPoints;\n  }\n\n  update = async () => {\n    const {\n      [AR.FrameAttribute.RawFeaturePoints]: points,\n    } = await AR.getCurrentFrameAsync({\n      [AR.FrameAttribute.RawFeaturePoints]: true,\n    });\n\n    this.points = points || [];\n  };\n}\n"]}