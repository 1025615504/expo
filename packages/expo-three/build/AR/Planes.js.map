{"version":3,"file":"Planes.js","sourceRoot":"","sources":["../../src/AR/Planes.ts"],"names":[],"mappings":"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","sourcesContent":["import * as AR from 'expo-ar';\nimport * as THREE from 'three';\n\ninterface PlanesContainer {\n  [key: number]: THREE.Object3D;\n};\n\nexport default class Planes extends THREE.Object3D {\n  storedPlanes: PlanesContainer = {};\n  planesData: AR.Plane[] = [];\n  segments = 5;\n  defaultRotationX = -Math.PI * 0.5;\n\n  planeMaterial = new THREE.MeshBasicMaterial({\n    color: 0xffff00,\n    wireframe: true,\n  });\n\n  get planes() {\n    return this.planesData;\n  }\n\n  set planes(newPlanesData) {\n    this.planesData = newPlanesData;\n    const newPlanes = {};\n\n    newPlanesData.forEach(\n      ({ extent: { width, length }, worldTransform, id }) => {\n        let planeObject = this.storedPlanes[id];\n        if (planeObject) {\n          // plane already exists\n          delete this.storedPlanes[id]; // remove plane from orginal container\n        } else {\n          // no such plane - create one\n          const geometry = new THREE.PlaneBufferGeometry(\n            width,\n            length,\n            this.segments,\n            this.segments\n          );\n          const planeMesh = new THREE.Mesh(geometry, this.planeMaterial);\n          planeMesh.rotation.x = this.defaultRotationX;\n\n          planeObject = new THREE.Object3D();\n          // @ts-ignore\n          planeObject.planeMesh = planeMesh;\n          planeObject.add(planeMesh);\n          this.add(planeObject);\n        }\n\n        // store plane\n        newPlanes[id] = planeObject;\n\n        // @ts-ignore\n        planeObject.planeMesh.geometry.width = width;\n        // @ts-ignore\n        planeObject.planeMesh.geometry.height = length;\n\n        planeObject.matrix.fromArray(worldTransform);\n        planeObject.matrix.decompose(\n          planeObject.position,\n          planeObject.quaternion,\n          planeObject.scale\n        );\n      }\n    );\n\n    // remove old planes from THREE\n    Object.entries(this.storedPlanes).forEach(([_, plane]) =>\n      this.remove(plane)\n    );\n    this.storedPlanes = newPlanes;\n  }\n\n  update = async () => {\n    const {\n      [AR.FrameAttribute.Planes]: planes,\n    } = await AR.getCurrentFrameAsync({\n      [AR.FrameAttribute.Planes]: true,\n    });\n    this.planes = planes || [];\n  };\n}\n"]}