{"version":3,"file":"parseAsync.js","sourceRoot":"","sources":["../src/parseAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport resolveAsset, { stringFromAsset } from './resolveAsset';\n\ndeclare module 'THREE' {\n  class BinaryLoader extends THREE.Loader {}\n}\n\nasync function loadBinAsync(binLocalUrl) {\n  const bufferLoader = new THREE.FileLoader(THREE.DefaultLoadingManager);\n  bufferLoader.setResponseType('arraybuffer');\n  return new Promise((res, rej) => bufferLoader.load(binLocalUrl, res, () => {}, rej));\n}\n\nasync function parseBinAsync({ json, assetProvider }) {\n  const { buffers, materials } = json;\n  if (!buffers) {\n    console.error(\n      `ExpoTHREE.parseAsync: Invalid json! The json file must contain a \"buffers\" key.`\n    );\n    return;\n  }\n  const bin = await assetProvider(buffers);\n  if (bin === undefined) {\n    console.error(\n      `ExpoTHREE.parseAsync: Cannot parse undefined .bin. Using the assetProvider you must pass a valid reference for: ${buffers}.`\n    );\n    return;\n  }\n  const assets = await resolveAsset(bin);\n  const binLocalUrl = await stringFromAsset(assets[0]);\n  const arrayBuffer = await loadBinAsync(binLocalUrl);\n\n  // TODO: bbarthec BinaryLoader is no longer available\n  // require('three/examples/js/loaders/BinaryLoader');\n  const loader = new THREE.BinaryLoader() as any;\n  loader.setPath && loader.setPath(assetProvider);\n  return new Promise((res, rej) =>\n    loader.parse(\n      arrayBuffer,\n      geometry => res({ geometry, materials }),\n      '', //This is probs wrong\n      materials\n    )\n  );\n}\n\nasync function parseWithLoaderAsync({ json, assetProvider, loader }) {\n  loader.setPath && loader.setPath(assetProvider);\n  return loader.parse(json, assetProvider);\n}\n\nconst parseAsync = async ({ json, format, assetProvider }) => {\n  if (!format) {\n    format = solveFormat(json);\n  }\n\n  switch (format) {\n    case 'bin':\n      return parseBinAsync({ json, assetProvider });\n    case 'clara':\n    case 'object':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new THREE.ObjectLoader(),\n      });\n    case 'json':\n    case 'blender':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new THREE.JSONLoader(),\n      });\n    case 'buffer':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new THREE.BufferGeometryLoader(),\n      });\n    case 'scene':\n    default:\n      console.error(`ExpoTHREE.parseAsync: ${format} not supported yet! Tell someone to fix it :}`);\n      break;\n  }\n};\n\nexport default parseAsync;\n\nfunction solveFormat({ metadata }) {\n  if (metadata !== undefined) {\n    const { type } = metadata;\n    if (type !== undefined) {\n      return type;\n    }\n  }\n}\n"]}