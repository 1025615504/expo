{"version":3,"file":"loadAsync.js","sourceRoot":"","sources":["../../src/loaders/loadAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport AssetUtils from 'expo-asset-utils';\n\nimport resolveAsset from '../resolveAsset';\nimport parseAssetCallback from './parseAssetCallback';\n\nimport {\n  loadDaeAsync,\n  loadObjAsync,\n  loadMtlAsync,\n  loadTextureAsync,\n  loadArrayBufferAsync,\n} from './loadModelsAsync';\n\nimport {\n  loaderClassForExtension,\n  loaderClassForUri,\n} from './loaderClassForExtension';\n\nexport async function loadBasicModelAsync({\n  uri,\n  onProgress,\n  onAssetRequested,\n  loader,\n  LoaderClass,\n}: {\n  uri: string;\n  onProgress: () => void;\n  onAssetRequested: () => void;\n  loader?: any;\n  LoaderClass: any;\n}) {\n  const _loader = loader || new LoaderClass();\n  if (_loader.setPath) _loader.setPath(onAssetRequested);\n  return new Promise((res, rej) => _loader.load(uri, res, onProgress, rej));\n}\n\nexport const loadAsync = async (res: any, onProgress?: any, onAssetRequested?: any) => {\n  let urls = await resolveAsset(res);\n  if (!urls) {\n    console.error(\n      `ExpoTHREE.loadAsync: Cannot parse undefined assets. Please pass valid resources for: ${res}.`\n    );\n    return;\n  }\n  const asset = urls[0];\n  let url = await AssetUtils.uriAsync(asset);\n\n  if (!url) {\n    console.error(\n      `ExpoTHREE.loadAsync: this asset couldn't be downloaded. Be sure that your app.json contains the correct extensions.`\n    );\n  }\n\n  if (urls.length == 1) {\n    if (url.match(/\\.(jpeg|jpg|gif|png)$/)) {\n      return loadTextureAsync({ asset });\n    } else if (url.match(/\\.assimp$/i)) {\n      const arrayBuffer = await loadArrayBufferAsync({ uri: url, onProgress });\n      const AssimpLoader = loaderClassForExtension('assimp');\n      const loader = new AssimpLoader();\n      return loader.parse(arrayBuffer, onAssetRequested);\n    } else if (url.match(/\\.dae$/i)) {\n      return loadDaeAsync({\n        asset: url,\n        onProgress,\n        onAssetRequested,\n      });\n    } else if (url.match(/\\.x$/i)) {\n      const XLoader = loaderClassForExtension('x');\n\n      const texLoader = {\n        path: onAssetRequested,\n        load: loadTexture,\n      };\n      const loader = new XLoader(undefined, texLoader);\n      return new Promise((res, rej) =>\n        loader.load([url, false], res, onProgress, rej)\n      );\n    } else if (url.match(/\\.json$/i)) {\n      console.error(\n        'loadAsync: Please use ExpoTHREE.parseAsync({json}) instead, json can be loaded in lots of different ways.'\n      );\n      return;\n    } else if (url.match(/\\.obj$/i)) {\n      // @ts-ignore\n      return loadObjAsync({ asset: url, onAssetRequested });\n    } else if (url.match(/\\.mtl$/i)) {\n      return loadMtlAsync({ asset: url, onAssetRequested });\n    } else {\n      const LoaderClass = loaderClassForUri(url);\n      return loadBasicModelAsync({\n        uri: url,\n        onProgress,\n        onAssetRequested,\n        LoaderClass,\n      });\n    }\n  } else if (urls.length === 2) {\n    // @ts-ignore\n    let urlB = await stringFromAsset(urls[1]);\n    if (url.match(/\\.mtl$/i) && urlB.match(/\\.obj$/i)) {\n      // @ts-ignore\n      return loadObjAsync({\n        asset: urlB,\n        mtlAsset: url,\n        onAssetRequested,\n      });\n    } else if (url.match(/\\.obj$/i) && urlB.match(/\\.mtl$/i)) {\n      // @ts-ignore\n      return loadObjAsync({\n        asset: url,\n        mtlAsset: urlB,\n        onAssetRequested,\n      });\n    } else {\n      console.error('Unrecognized File Type', url);\n    }\n  } else {\n    console.error('Too many arguments passed', urls);\n    return;\n  }\n};\n\nexport default loadAsync;\n\nconst loadTexture = function(url, onLoad, onProgress, onError) {\n  const texture = new THREE.Texture();\n  if (\n    // @ts-ignore\n    typeof this.path === 'function' ||\n    // @ts-ignore\n    (this.path !== null && typeof this.path === 'object')\n  ) {\n    (async () => {\n      url = url.split('/').pop();\n      // @ts-ignore\n      const asset = await parseAssetCallback(url, this.path);\n      // @ts-ignore\n      const { minFilter, image } = await loadTextureAsync({ asset });\n      texture.image = image;\n      texture.needsUpdate = true;\n      // @ts-ignore\n      texture.isDataTexture = true; // Forces passing to `gl.texImage2D(...)` verbatim\n      texture.minFilter = minFilter; // Pass-through non-power-of-two\n\n      if (onLoad !== undefined) {\n        console.warn('loaded tex', texture);\n        onLoad(texture);\n      }\n    })();\n  }\n\n  return texture;\n};\n\n/*\n  **Super Hack:**\n  Override Texture Loader to use the `path` component as a callback to get resources or Expo `Asset`s\n*/\n\nTHREE.TextureLoader.prototype.load = loadTexture;\n"]}