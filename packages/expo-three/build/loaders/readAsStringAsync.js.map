{"version":3,"file":"readAsStringAsync.js","sourceRoot":"","sources":["../../src/loaders/readAsStringAsync.ts"],"names":[],"mappings":"AAWA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,qCAAqC;AACrC,KAAK,UAAU,iBAAiB,CAAC,QAAgB;IAC/C,IAAI,MAAM,CAAC,wBAAwB,EAAE;QACnC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;KAC1C;IACD,IAAI,IAAI,CAAC;IACT,IAAI;QACF,IAAI,GAAG,MAAM,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KACrD;IAAC,OAAO,EAAE,OAAO,EAAE,EAAE;QACpB,OAAO,CAAC,KAAK,CACX,sDAAsD,EACtD,OAAO,CACR,CAAC;KACH;YAAS;QACR,IAAI,MAAM,CAAC,wBAAwB,EAAE;YACnC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC;KACb;AACH,CAAC;AAED,eAAe,iBAAiB,CAAC","sourcesContent":["declare namespace global {\n  function __expo_three_log_loading();\n}\n\ndeclare namespace console {\n  function error(message?: any, ...optionalParams: any[]): void;\n  function log(message?: any, ...optionalParams: any[]): void;\n  function time(message?: any): void;\n  function timeEnd(message?: any): void;\n}\n\nimport { FileSystem } from 'expo';\n\n// TODO: Evan: Is it worth the bloat?\nasync function readAsStringAsync(localUri: string): Promise<string | undefined> {\n  if (global.__expo_three_log_loading) {\n    console.time('loadAsset');\n    console.log('Load local file', localUri);\n  }\n  let file;\n  try {\n    file = await FileSystem.readAsStringAsync(localUri);\n  } catch ({ message }) {\n    console.error(\n      'Error: ExpoTHREE: Expo.FileSystem.readAsStringAsync:',\n      message\n    );\n  } finally {\n    if (global.__expo_three_log_loading) {\n      console.timeEnd('loadAsset');\n    }\n    return file;\n  }\n}\n\nexport default readAsStringAsync;\n"]}