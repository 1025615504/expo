{"version":3,"file":"loadModelsAsync.js","sourceRoot":"","sources":["../../src/loaders/loadModelsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport readAsStringAsync from './readAsStringAsync';\nimport AssetUtils from 'expo-asset-utils';\n\nfunction provideBundlingExtensionErrorMessage({ extension, funcName }) {\n  return `\n    ExpoTHREE.${funcName}: The \\`asset\\` provided cannot be resolved. \n    Please make sure your Expo project's \\`app.json\\` is bundling your asset, by including the extension: ${extension}\n      // app.json\n      \"expo\": {\n          \"packagerOpts\": {\n              assetExts: [ \n                  \"${extension}\", \n                  ... \n              ],\n          }\n      }`;\n}\n\nasync function loadFileAsync({ asset, extension, funcName }) {\n  if (!asset) {\n    console.error(`ExpoTHREE.${funcName}: Cannot parse a null asset`);\n    return;\n  }\n  let uri;\n  try {\n    uri = await AssetUtils.uriAsync(asset);\n  } catch ({ message }) {\n    const customErrorMessage = provideBundlingExtensionErrorMessage({\n      extension,\n      funcName,\n    });\n    console.error(customErrorMessage, message);\n  } finally {\n    return uri;\n  }\n  if (uri == null || typeof uri !== 'string' || uri === '') {\n    console.error(\n      `ExpoTHREE.${funcName}: Invalid \\`localUri\\` was retrieved from \\`asset\\` prop:`,\n      uri\n    );\n  }\n  if (!uri.match(`/\\.${extension}$/i`)) {\n    console.error(\n      `ExpoTHREE.${funcName}: the \\`asset\\` provided doesn't have the correct extension of: .${extension}. URI: ${uri}`\n    );\n  }\n  return null;\n}\n\nexport async function loadTextureAsync({ asset }) {\n  if (!asset) {\n    console.error('ExpoTHREE.loadTextureAsync(): Cannot parse null asset')\n    return;\n  }\n  let nextAsset = asset;\n  if (!nextAsset.localUri) {\n    nextAsset = await AssetUtils.resolveAsync(asset);\n  }\n  const texture = new THREE.Texture();\n  texture.image = {\n    data: nextAsset,\n    width: nextAsset.width,\n    height: nextAsset.height,\n  };\n  texture.needsUpdate = true;\n  // @ts-ignore\n  texture.isDataTexture = true; // Forces passing to `gl.texImage2D(...)` verbatim\n  texture.minFilter = THREE.LinearFilter; // Pass-through non-power-of-two\n  return texture;\n}\n\nexport async function loadMtlAsync({ asset, onAssetRequested }) {\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'mtl',\n    funcName: 'loadMtlAsync',\n  });\n  if (!uri) return;\n\n  if (THREE.MTLLoader == null) {\n    require('./MTLLoader');\n  }\n\n  const loader = new THREE.MTLLoader();\n  loader.setPath(onAssetRequested);\n\n  return loadFileContentsAsync(loader, uri, 'loadMtlAsync');\n}\n\nexport async function loadObjAsync({\n  asset,\n  onAssetRequested,\n  onMtlAssetRequested,\n  mtlAsset,\n  materials,\n}) {\n  let nextMaterials = materials;\n  if (nextMaterials == null && mtlAsset != null) {\n    nextMaterials = await loadMtlAsync({\n      asset: mtlAsset,\n      onAssetRequested: onMtlAssetRequested || onAssetRequested,\n    });\n    nextMaterials.preload();\n  }\n\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'obj',\n    funcName: 'loadObjAsync',\n  });\n  if (!uri) return;\n\n  if (THREE.OBJLoader == null) {\n    require('three/examples/js/loaders/OBJLoader');\n  }\n  const loader = new THREE.OBJLoader();\n  loader.setPath(onAssetRequested);\n  if (nextMaterials != null) {\n    loader.setMaterials(nextMaterials);\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadObjAsync');\n}\n\nexport async function loadDaeAsync({ asset, onAssetRequested, onProgress }) {\n  let uri = await loadFileAsync({\n    asset,\n    extension: 'dae',\n    funcName: 'loadDaeAsync',\n  });\n  if (!uri) return;\n\n  if (THREE.ColladaLoader == null) {\n    require('three/examples/js/loaders/ColladaLoader');\n  }\n\n  return new Promise((res, rej) =>\n    new THREE.FileLoader().load(\n      uri,\n      text => {\n        const loader = new THREE.ColladaLoader();\n        // @ts-ignore\n        res(loader.parse(text, onAssetRequested));\n      },\n      onProgress,\n      rej\n    )\n  );\n}\n\nasync function loadFileContentsAsync(loader, uri, funcName) {\n  try {\n    const fileContents = await readAsStringAsync(uri);\n    return loader.parse(fileContents);\n  } catch ({ message }) {\n    // Or model loader THREE.OBJLoader failed to parse fileContents\n    console.error(\n      `ExpoTHREE.${funcName}: Expo.FileSystem Failed to read uri: ${uri}.`,\n      message\n    );\n  }\n}\n\nexport async function loadArrayBufferAsync({ uri, onProgress }) {\n  const loader = new THREE.FileLoader();\n  loader.setResponseType('arraybuffer');\n  return new Promise((res, rej) => loader.load(uri, res, onProgress, rej));\n}\n"]}