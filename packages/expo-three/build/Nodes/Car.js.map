{"version":3,"file":"Car.js","sourceRoot":"","sources":["../../src/Nodes/Car.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n * @author evanbacon / http://github.com/evanbacon/\n */\n\nimport * as THREE from 'three';\nimport parseAsync from '../parseAsync';\n\nexport default function(this: any) {\n  this.modelScale = 1;\n  this.backWheelOffset = 2;\n  this.autoWheelGeometry = true;\n  this.controls = {\n    forward: false,\n    backward: false,\n    left: false,\n    right: false,\n  };\n  // car geometry parameters automatically set from wheel mesh\n  // \t- assumes wheel mesh is front left wheel in proper global\n  //    position with respect to body mesh\n  //\t- other wheels are mirrored against car root\n  //\t- if necessary back wheels can be offset manually\n\n  this.wheelOffset = new THREE.Vector3();\n  this.wheelDiameter = 1;\n\n  // car \"feel\" parameters\n\n  this.MAX_SPEED = 22.0;\n  this.MAX_REVERSE_SPEED = -15.0;\n\n  this.MAX_WHEEL_ROTATION = 0.6;\n\n  this.FRONT_ACCELERATION = 12.5;\n  this.BACK_ACCELERATION = 15.0;\n\n  this.WHEEL_ANGULAR_ACCELERATION = 1.5;\n\n  this.FRONT_DECCELERATION = 7.5;\n  this.WHEEL_ANGULAR_DECCELERATION = 1.0;\n\n  this.STEERING_RADIUS_RATIO = 0.23;\n\n  this.MAX_TILT_SIDES = 0.05;\n  this.MAX_TILT_FRONTBACK = 0.015;\n\n  // internal control variables\n\n  this.speed = 0;\n  this.acceleration = 0;\n\n  this.wheelOrientation = 0;\n  this.carOrientation = 0;\n\n  // car rigging\n\n  this.root = new THREE.Object3D();\n\n  this.frontLeftWheelRoot = new THREE.Object3D();\n  this.frontRightWheelRoot = new THREE.Object3D();\n\n  this.bodyMesh = null;\n\n  this.frontLeftWheelMesh = null;\n  this.frontRightWheelMesh = null;\n\n  this.backLeftWheelMesh = null;\n  this.backRightWheelMesh = null;\n\n  // internal helper variables\n\n  this.loaded = false;\n\n  this.meshes = [];\n\n  // API\n\n  this.enableShadows = function(enable) {\n    for (var i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].castShadow = enable;\n      this.meshes[i].receiveShadow = enable;\n    }\n  };\n\n  this.setVisible = function(enable) {\n    for (var i = 0; i < this.meshes.length; i++) {\n      this.meshes[i].visible = enable;\n      this.meshes[i].visible = enable;\n    }\n  };\n\n  this.loadParts = async function(bodyJson, wheelJson, assetProvider) {\n    const body = await parseAsync({\n      format: 'bin',\n      json: bodyJson,\n      assetProvider,\n    });\n    const wheel = await parseAsync({\n      format: 'bin',\n      json: wheelJson,\n      assetProvider,\n    });\n    return await createCar({ body, wheel });\n  };\n\n  this.updateCarModel = function(delta) {\n    // speed and wheels based on controls\n    const { forward, backward, left, right } = this.controls;\n    if (forward) {\n      this.speed = THREE.Math.clamp(\n        this.speed + delta * this.FRONT_ACCELERATION,\n        this.MAX_REVERSE_SPEED,\n        this.MAX_SPEED\n      );\n      this.acceleration = THREE.Math.clamp(this.acceleration + delta, -1, 1);\n    }\n\n    if (backward) {\n      this.speed = THREE.Math.clamp(\n        this.speed - delta * this.BACK_ACCELERATION,\n        this.MAX_REVERSE_SPEED,\n        this.MAX_SPEED\n      );\n      this.acceleration = THREE.Math.clamp(this.acceleration - delta, -1, 1);\n    }\n\n    if (left) {\n      this.wheelOrientation = THREE.Math.clamp(\n        this.wheelOrientation + delta * this.WHEEL_ANGULAR_ACCELERATION,\n        -this.MAX_WHEEL_ROTATION,\n        this.MAX_WHEEL_ROTATION\n      );\n    }\n\n    if (right) {\n      this.wheelOrientation = THREE.Math.clamp(\n        this.wheelOrientation - delta * this.WHEEL_ANGULAR_ACCELERATION,\n        -this.MAX_WHEEL_ROTATION,\n        this.MAX_WHEEL_ROTATION\n      );\n    }\n\n    // speed decay\n\n    if (!(forward || backward)) {\n      if (this.speed > 0) {\n        var k = exponentialEaseOut(this.speed / this.MAX_SPEED);\n\n        this.speed = THREE.Math.clamp(\n          this.speed - k * delta * this.FRONT_DECCELERATION,\n          0,\n          this.MAX_SPEED\n        );\n        this.acceleration = THREE.Math.clamp(this.acceleration - k * delta, 0, 1);\n      } else {\n        var k = exponentialEaseOut(this.speed / this.MAX_REVERSE_SPEED);\n\n        this.speed = THREE.Math.clamp(\n          this.speed + k * delta * this.BACK_ACCELERATION,\n          this.MAX_REVERSE_SPEED,\n          0\n        );\n        this.acceleration = THREE.Math.clamp(this.acceleration + k * delta, -1, 0);\n      }\n    }\n\n    // steering decay\n\n    if (!(left || right)) {\n      if (this.wheelOrientation > 0) {\n        this.wheelOrientation = THREE.Math.clamp(\n          this.wheelOrientation - delta * this.WHEEL_ANGULAR_DECCELERATION,\n          0,\n          this.MAX_WHEEL_ROTATION\n        );\n      } else {\n        this.wheelOrientation = THREE.Math.clamp(\n          this.wheelOrientation + delta * this.WHEEL_ANGULAR_DECCELERATION,\n          -this.MAX_WHEEL_ROTATION,\n          0\n        );\n      }\n    }\n\n    // car update\n\n    var forwardDelta = this.speed * delta;\n\n    this.carOrientation += forwardDelta * this.STEERING_RADIUS_RATIO * this.wheelOrientation;\n\n    // displacement\n\n    this.root.position.x += Math.sin(this.carOrientation) * forwardDelta;\n    this.root.position.z += Math.cos(this.carOrientation) * forwardDelta;\n\n    // steering\n\n    this.root.rotation.y = this.carOrientation;\n\n    // tilt\n\n    if (this.loaded) {\n      this.bodyMesh.rotation.z =\n        this.MAX_TILT_SIDES * this.wheelOrientation * (this.speed / this.MAX_SPEED);\n      this.bodyMesh.rotation.x = -this.MAX_TILT_FRONTBACK * this.acceleration;\n    }\n\n    // wheels rolling\n\n    var angularSpeedRatio = 1 / (this.modelScale * (this.wheelDiameter / 2));\n\n    var wheelDelta = forwardDelta;\n\n    if (this.loaded) {\n      this.frontLeftWheelMesh.rotation.x += wheelDelta;\n      this.frontRightWheelMesh.rotation.x += wheelDelta;\n      this.backLeftWheelMesh.rotation.x += wheelDelta;\n      this.backRightWheelMesh.rotation.x += wheelDelta;\n    }\n\n    // front wheels steering\n\n    this.frontLeftWheelRoot.rotation.y = this.wheelOrientation;\n    this.frontRightWheelRoot.rotation.y = this.wheelOrientation;\n  };\n\n  // internal helper methods\n\n  const createCar = ({ body, wheel }) => {\n    // compute wheel geometry parameters\n\n    this.body = body;\n    this.wheel = wheel;\n\n    if (this.autoWheelGeometry) {\n      wheel.geometry.computeBoundingBox();\n\n      let bb = wheel.geometry.boundingBox;\n\n      this.wheelOffset.addVectors(bb.min, bb.max);\n      this.wheelOffset.multiplyScalar(0.5);\n      this.wheelDiameter = bb.max.y - bb.min.y;\n      wheel.geometry.center();\n    }\n\n    // rig the car\n    let delta = new THREE.Vector3();\n    // body\n\n    this.bodyMesh = new THREE.Mesh(body.geometry, body.materials);\n    this.bodyMesh.scale.set(this.modelScale, this.modelScale, this.modelScale);\n\n    this.root.add(this.bodyMesh);\n\n    // front left wheel\n\n    delta.multiplyVectors(\n      this.wheelOffset,\n      new THREE.Vector3(this.modelScale, this.modelScale, this.modelScale)\n    );\n\n    this.frontLeftWheelRoot.position.add(delta);\n\n    this.frontLeftWheelMesh = new THREE.Mesh(wheel.geometry, wheel.materials);\n    this.frontLeftWheelMesh.scale.set(this.modelScale, this.modelScale, this.modelScale);\n\n    this.frontLeftWheelRoot.add(this.frontLeftWheelMesh);\n    this.root.add(this.frontLeftWheelRoot);\n\n    // front right wheel\n\n    delta.multiplyVectors(\n      this.wheelOffset,\n      new THREE.Vector3(-this.modelScale, this.modelScale, this.modelScale)\n    );\n\n    this.frontRightWheelRoot.position.add(delta);\n\n    this.frontRightWheelMesh = new THREE.Mesh(wheel.geometry, wheel.materials);\n\n    this.frontRightWheelMesh.scale.set(this.modelScale, this.modelScale, this.modelScale);\n    this.frontRightWheelMesh.rotation.z = Math.PI;\n\n    this.frontRightWheelRoot.add(this.frontRightWheelMesh);\n    this.root.add(this.frontRightWheelRoot);\n\n    // back left wheel\n\n    delta.multiplyVectors(\n      this.wheelOffset,\n      new THREE.Vector3(this.modelScale, this.modelScale, -this.modelScale)\n    );\n    delta.z -= this.backWheelOffset;\n\n    this.backLeftWheelMesh = new THREE.Mesh(wheel.geometry, wheel.materials);\n\n    this.backLeftWheelMesh.position.add(delta);\n    this.backLeftWheelMesh.scale.set(this.modelScale, this.modelScale, this.modelScale);\n\n    this.root.add(this.backLeftWheelMesh);\n\n    // back right wheel\n\n    delta.multiplyVectors(\n      this.wheelOffset,\n      new THREE.Vector3(-this.modelScale, this.modelScale, -this.modelScale)\n    );\n    delta.z -= this.backWheelOffset;\n\n    this.backRightWheelMesh = new THREE.Mesh(wheel.geometry, wheel.materials);\n\n    this.backRightWheelMesh.position.add(delta);\n    this.backRightWheelMesh.scale.set(this.modelScale, this.modelScale, this.modelScale);\n    this.backRightWheelMesh.rotation.z = Math.PI;\n\n    this.root.add(this.backRightWheelMesh);\n\n    this.meshes = [\n      this.bodyMesh,\n      this.frontLeftWheelMesh,\n      this.frontRightWheelMesh,\n      this.backLeftWheelMesh,\n      this.backRightWheelMesh,\n    ];\n\n    this.loaded = true;\n    return this;\n  };\n\n  function quadraticEaseOut(k) {\n    return -k * (k - 2);\n  }\n  function cubicEaseOut(k) {\n    return --k * k * k + 1;\n  }\n  function circularEaseOut(k) {\n    return Math.sqrt(1 - --k * k);\n  }\n  function sinusoidalEaseOut(k) {\n    return Math.sin((k * Math.PI) / 2);\n  }\n  function exponentialEaseOut(k) {\n    return k === 1 ? 1 : -Math.pow(2, -10 * k) + 1;\n  }\n}\n"]}