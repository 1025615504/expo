{"version":3,"file":"BarCodeScanner.js","sourceRoot":"","sources":["../src/BarCodeScanner.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport mapValues from 'lodash.mapvalues';\nimport { NativeModulesProxy, requireNativeViewManager } from 'expo-core';\nimport { findNodeHandle, ViewPropTypes, Platform, View } from 'react-native';\n\ntype EventCallbackArgumentsType = {\n  nativeEvent: any,\n};\n\ntype Props = React.ComponentProps<typeof View> & {\n  onBarCodeScanned: (EventCallbackArgumentsType) => void,\n  barCodeTypes?: Array<string>,\n  type?: string | number,\n};\n\nconst { ExpoBarCodeScannerModule }: any = NativeModulesProxy;\n\nconst EVENT_THROTTLE_MS: number = 500;\n\nexport default class BarCodeScanner extends React.Component<Props> {\n  lastEvents: any;\n  lastEventsTimes: any;\n  barCodeScannerRef?: any;\n  barCodeScannerHandle?: number | null;\n\n  static Constants = {\n    BarCodeType: ExpoBarCodeScannerModule.BarCodeType,\n    Type: ExpoBarCodeScannerModule.Type,\n  };\n\n  static ConversionTables = {\n    type: ExpoBarCodeScannerModule.Type,\n  };\n\n  static propTypes = {\n    ...ViewPropTypes,\n    onBarCodeScanned: PropTypes.func,\n    barCodeTypes: PropTypes.array,\n    type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  };\n\n  static defaultProps = {\n    type: ExpoBarCodeScannerModule.Type.back,\n    barCodeTypes: Object.values(ExpoBarCodeScannerModule.BarCodeType),\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.lastEvents = {};\n    this.lastEventsTimes = {};\n  }\n\n  static async scanFromURLAsync(url: string, barCodeTypes: Array<string>) {\n    if (Array.isArray(barCodeTypes) && barCodeTypes.length === 0) {\n      throw new Error('No barCodeTypes requested, provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeScanner.Constants.BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeScanner.Constants.BarCodeType.qr]);\n    }\n\n    // on Android if barCodeTypes not provided use all available types\n    const effectiveBarCodeTypes = barCodeTypes || Object.values(ExpoBarCodeScannerModule.BarCodeType);\n    return ExpoBarCodeScannerModule.scanFromURLAsync(url, effectiveBarCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        ref={this.setReference}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  setReference = (ref?: React.Component) => {\n    if (ref) {\n      this.barCodeScannerRef = ref;\n      this.barCodeScannerHandle = findNodeHandle(ref);\n    } else {\n      this.barCodeScannerRef = null;\n      this.barCodeScannerHandle = null;\n    }\n  };\n\n  onObjectDetected = (callback?: Function) => ({ nativeEvent }: EventCallbackArgumentsType) => {\n    const { type } = nativeEvent;\n    if (this.lastEvents[type] &&\n      this.lastEventsTimes[type] &&\n      JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n      new Date().getTime() - this.lastEventsTimes[type].getTime() < EVENT_THROTTLE_MS\n    ) {\n      return;\n    }\n\n    if (callback) {\n      callback(nativeEvent);\n      this.lastEventsTimes[type] = new Date();\n      this.lastEvents[type] = JSON.stringify(nativeEvent);\n    }\n  };\n\n  convertNativeProps(props: Props) {\n    const newProps = mapValues(props, this.convertProp);\n    return newProps;\n  }\n\n  convertProp(value, key: string) {\n    if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n      return BarCodeScanner.ConversionTables[key][value];\n    }\n    return value;\n  }\n}\n\nexport const Constants = BarCodeScanner.Constants;\n\nconst ExpoBarCodeScannerView = requireNativeViewManager('ExpoBarCodeScannerView');\n"]}